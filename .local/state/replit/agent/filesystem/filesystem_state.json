{"file_contents":{"RENDER_DEPLOYMENT.md":{"content":"# Render Deployment Guide\n\n## Prerequisites\n\n1. A Render account (https://render.com)\n2. This repository pushed to GitHub, GitLab, or Bitbucket\n3. A PostgreSQL database (Render provides free PostgreSQL databases)\n\n## Deployment Steps\n\n### 1. Create a PostgreSQL Database on Render\n\n1. Go to your Render dashboard\n2. Click \"New +\" and select \"PostgreSQL\"\n3. Fill in the database details:\n   - **Name**: molla-invoice-db (or your preferred name)\n   - **Database**: molla_invoice\n   - **User**: (auto-generated)\n   - **Region**: Choose closest to your users\n   - **Plan**: Free (or paid for production)\n4. Click \"Create Database\"\n5. Copy the **Internal Database URL** (starts with `postgresql://`)\n\n### 2. Deploy the Web Service\n\n#### Option A: Using render.yaml (Recommended)\n\n1. Push the `render.yaml` file to your repository\n2. Go to Render dashboard\n3. Click \"New +\" and select \"Blueprint\"\n4. Connect your repository\n5. Render will automatically detect the `render.yaml` and configure your service\n6. Set the required environment variables (see below)\n\n#### Option B: Manual Setup\n\n1. Go to your Render dashboard\n2. Click \"New +\" and select \"Web Service\"\n3. Connect your repository\n4. Configure the service:\n   - **Name**: molla-invoice-generator\n   - **Runtime**: Node\n   - **Build Command**: `npm install && npm run build`\n   - **Start Command**: `npm run start`\n   - **Plan**: Free (or paid for production)\n\n### 3. Configure Environment Variables\n\nIn your Render service settings, add the following environment variables:\n\n#### Required Variables:\n\n- **DATABASE_URL**: \n  - Value: Your PostgreSQL Internal Database URL from step 1\n  - Example: `postgresql://user:password@host:5432/database`\n\n- **SESSION_SECRET**: \n  - Value: A random, secure string (at least 32 characters)\n  - Example: You can generate one using: `openssl rand -base64 32`\n\n#### Authentication Variables (IMPORTANT):\n\nThis application uses Replit Auth for authentication. To deploy on Render, you have two options:\n\n**Option 1: Continue Using Replit Auth**\n- **REPLIT_DOMAINS**: Your Render service URL (e.g., `your-app.onrender.com`)\n- **REPL_ID**: Your Replit application ID\n- **ISSUER_URL**: `https://replit.com/oidc`\n\nNote: You'll need to configure your Replit OAuth application to allow callbacks from your Render domain. This may require contacting Replit support or configuring OAuth settings in your Replit account.\n\n**Option 2: Replace with Different Auth Provider** (Recommended for Production)\n- Consider implementing Google OAuth, GitHub OAuth, or another authentication provider\n- This requires modifying `server/replitAuth.ts` to use a different OAuth strategy\n\n### 4. Push Database Schema\n\nAfter your service is deployed:\n\n1. Go to the Shell tab in your Render service\n2. Run: `npm run db:push`\n3. This will create all necessary database tables including:\n   - users (authentication)\n   - sessions (session storage)\n   - clients (client management)\n   - invoices (invoice records)\n   - invoice_items (invoice line items)\n   - settings (application settings)\n\n### 5. Verify Deployment\n\n1. Visit your Render service URL\n2. You should see the MOLLA ENTERPRISES landing page\n3. Test the authentication flow\n\n## Important Notes\n\n### Port Configuration\n- Render automatically provides the `PORT` environment variable\n- The application is already configured to use `process.env.PORT`\n- Default Render port is 10000 (automatically handled)\n\n### Database Migrations\n- Use `npm run db:push` to update database schema\n- Never manually edit the database\n- The application uses Drizzle ORM for type-safe database operations\n\n### Performance Considerations\n- **Free Tier**: Services sleep after 15 minutes of inactivity\n- **Cold Starts**: First request after sleep may be slow (15-30 seconds)\n- **Upgrade**: Consider paid plans for production use to eliminate cold starts\n\n### Troubleshooting\n\n#### Build Failures\n- Check that Node.js version 20.x is available\n- Verify all dependencies are in `package.json` dependencies (not devDependencies)\n- Review build logs for specific errors\n\n#### Runtime Errors\n- Check environment variables are set correctly\n- Verify DATABASE_URL is the Internal Database URL\n- Ensure database schema is pushed: `npm run db:push`\n\n#### Authentication Issues\n- Verify REPLIT_DOMAINS matches your Render service URL\n- Check that REPL_ID is configured correctly\n- Consider implementing alternative authentication for production\n\n### Security Checklist\n\n- [ ] SESSION_SECRET is a strong, random value\n- [ ] DATABASE_URL uses the Internal Database URL (not External)\n- [ ] All environment variables are set in Render dashboard (not committed to git)\n- [ ] PostgreSQL database has a strong password\n- [ ] Consider enabling HTTPS (automatically provided by Render)\n\n## Production Recommendations\n\n1. **Upgrade Database**: Free tier has storage and connection limits\n2. **Upgrade Web Service**: Eliminate cold starts and increase resources\n3. **Custom Domain**: Configure a custom domain for professional branding\n4. **Monitoring**: Set up health checks and monitoring\n5. **Backups**: Configure automated database backups\n6. **Authentication**: Replace Replit Auth with a production OAuth provider\n\n## Support\n\nFor Render-specific issues, refer to:\n- Render Documentation: https://render.com/docs\n- Render Community: https://community.render.com\n\nFor application issues, check the service logs in your Render dashboard.\n","size_bytes":5415},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"render.yaml":{"content":"services:\n  - type: web\n    name: molla-invoice-generator\n    runtime: node\n    plan: free\n    buildCommand: npm install && npm run build\n    startCommand: npm run start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: DATABASE_URL\n        sync: false\n      - key: SESSION_SECRET\n        generateValue: true\n      - key: REPLIT_DOMAINS\n        sync: false\n      - key: REPL_ID\n        sync: false\n      - key: ISSUER_URL\n        value: https://replit.com/oidc\n    autoDeploy: true\n","size_bytes":506},"replit.md":{"content":"# Overview\n\nThis is a personal invoice generator web application for MOLLA ENTERPRISES, designed as a complete fullstack solution for creating, managing, and generating professional invoices. The application features a modern React frontend with a Node.js/Express backend, using PostgreSQL for data persistence and supporting PDF generation for invoices.\n\nThe system is specifically branded for MOLLA ENTERPRISES with custom styling using Lora and Inter fonts, blue gradient themes, and company-specific branding elements. It supports multi-currency invoicing, client management, and comprehensive invoice tracking with various status states.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe client-side is built with modern React using Vite as the build tool and development server. The application follows a component-based architecture with these key decisions:\n\n- **UI Framework**: Uses Radix UI primitives with Tailwind CSS for styling, providing accessibility and consistency\n- **State Management**: React Query (@tanstack/react-query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Management**: React Hook Form with Zod validation for type-safe forms\n- **Styling**: Tailwind CSS with custom CSS variables for theming and responsive design\n\nThe frontend implements a single-page application pattern with dedicated pages for Dashboard, Clients, Invoices, and Settings, all wrapped in a consistent navigation layout.\n\n## Backend Architecture\n\nThe server uses Express.js with TypeScript, following a RESTful API design pattern:\n\n- **Framework**: Express.js with TypeScript for type safety\n- **Database Layer**: Drizzle ORM for type-safe database queries and schema management\n- **API Structure**: RESTful endpoints organized by resource (clients, invoices, settings)\n- **Error Handling**: Centralized error handling middleware with proper HTTP status codes\n- **Development Tools**: Vite integration for hot module replacement in development\n\nThe backend implements a storage abstraction layer that separates database operations from route handlers, making the system more maintainable and testable.\n\n## Data Storage Solutions\n\nThe application uses PostgreSQL as the primary database with Drizzle ORM for schema management:\n\n- **Database**: PostgreSQL via Neon Database service\n- **ORM**: Drizzle ORM with automatic migration support\n- **Schema Design**: Relational design with proper foreign key constraints\n- **Data Types**: Uses appropriate PostgreSQL types including enums for status and currency\n- **Connection Management**: Connection pooling with @neondatabase/serverless\n\nThe database schema includes tables for clients, invoices, invoice items, and settings, with proper relationships and constraints to ensure data integrity.\n\n## PDF Generation\n\nThe system implements dual PDF generation capabilities:\n\n- **Frontend Generation**: html2canvas + jsPDF for client-side PDF creation\n- **Backend Generation**: Puppeteer for server-side PDF generation (prepared but not fully implemented)\n- **Template System**: Custom invoice templates with company branding\n- **Styling**: CSS-based invoice layouts that render consistently in PDF format\n\n## Authentication and Authorization\n\nThe application implements secure authentication using Replit's OAuth integration, which supports multiple authentication providers including Google, GitHub, Apple, and email/password:\n\n- **Authentication Provider**: Replit Auth via OpenID Connect (OIDC)\n- **Session Management**: PostgreSQL-backed session storage using express-session\n- **Authentication Middleware**: Passport.js with openid-client for OAuth 2.0 / OIDC flows\n- **Token Management**: Automatic access token refresh using refresh tokens\n- **Protected Routes**: All API endpoints require authentication via isAuthenticated middleware\n- **User Management**: Automatic user profile creation and updates on login\n\nThe system uses a landing page for unauthenticated users with a \"Sign In with Google\" button. Once authenticated, users can access the full invoice management system. A logout button in the navigation allows users to end their session securely.\n\n## Component Architecture\n\nThe frontend uses a hierarchical component structure:\n\n- **UI Components**: Reusable UI primitives based on Radix UI\n- **Feature Components**: Business logic components (InvoiceForm, ClientModal)\n- **Layout Components**: Navigation and page structure components\n- **Page Components**: Top-level route components\n\n## Development and Build System\n\nThe project uses modern tooling for development efficiency:\n\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Type Checking**: TypeScript across both frontend and backend\n- **Code Quality**: ESLint and TypeScript compiler for code validation\n- **Development Experience**: Hot module replacement and error overlays for rapid development\n\n# External Dependencies\n\n## Database Services\n\n- **Neon Database**: PostgreSQL hosting service with serverless capabilities\n- **Connection Pooling**: @neondatabase/serverless for efficient database connections\n\n## UI and Styling\n\n- **Radix UI**: Comprehensive set of accessible UI primitives including dialogs, dropdowns, forms, and navigation components\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Google Fonts**: Lora and Inter fonts for brand-consistent typography\n- **Lucide Icons**: Icon library for consistent iconography throughout the application\n\n## PDF Generation\n\n- **html2canvas**: Client-side HTML to canvas rendering for PDF generation\n- **jsPDF**: JavaScript PDF generation library\n- **Puppeteer**: Server-side browser automation for PDF generation (prepared for future use)\n\n## Authentication\n\n- **Passport.js**: Authentication middleware for Node.js\n- **openid-client**: OpenID Connect client library for OAuth flows\n- **express-session**: Session middleware for Express\n- **connect-pg-simple**: PostgreSQL session store for express-session\n- **memoizee**: Memoization library for caching OIDC configuration\n\n## Development Tools\n\n- **Vite**: Build tool and development server with React plugin\n- **Replit Integration**: Development environment plugins for banner and cartographer\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n## Form and Data Management\n\n- **React Hook Form**: Form state management with validation\n- **Zod**: TypeScript-first schema validation\n- **React Query**: Server state management and caching\n- **Drizzle ORM**: Type-safe database queries and schema management\n\n## Utility Libraries\n\n- **date-fns**: Date manipulation and formatting\n- **clsx**: Conditional className utility\n- **nanoid**: URL-safe unique string generator\n- **class-variance-authority**: Variant-based component styling utility\n\nThe application integrates these dependencies to create a cohesive system that supports the complete invoice generation workflow from client management through PDF export.\n\n# Replit Environment Setup\n\n## Configuration\n\nThe application is configured to run in the Replit environment with the following setup:\n\n### Development Workflow\n- **Command**: `npm run dev`\n- **Port**: 5000\n- **Host**: 0.0.0.0 (required for Replit proxy)\n- **Output Type**: webview\n\n### Database Setup\n- **Type**: PostgreSQL (Replit managed)\n- **Connection**: Uses environment variable `DATABASE_URL`\n- **Schema Management**: Drizzle ORM with `npm run db:push` for migrations\n- **Tables**: users, sessions, clients, invoices, invoice_items, settings\n\n### Deployment Configuration\n- **Target**: Autoscale deployment (stateless web application)\n- **Build Command**: `npm run build` (builds frontend with Vite and backend with esbuild)\n- **Start Command**: `npm run start` (runs production server)\n- **Port**: 5000\n\n### Environment Variables\nThe following environment variables are automatically configured by Replit:\n- `DATABASE_URL`: PostgreSQL connection string\n- `PGHOST`, `PGPORT`, `PGUSER`, `PGPASSWORD`, `PGDATABASE`: Individual database credentials\n- `SESSION_SECRET`: Secure secret for session management\n- `REPLIT_DOMAINS`: Comma-separated list of domains for OAuth callbacks\n- `REPL_ID`: Replit application ID for OAuth\n- `ISSUER_URL`: OAuth issuer URL (defaults to https://replit.com/oidc)\n\n### Important Notes\n- The Vite server is configured with `allowedHosts: true` to work with Replit's proxy\n- The Express server binds to `0.0.0.0:5000` to be accessible through Replit's web view\n- Hot module replacement (HMR) is enabled for rapid development","size_bytes":8605},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        blue: {\n          100: \"var(--blue-100)\",\n          600: \"var(--blue-600)\",\n          700: \"var(--blue-700)\",\n          800: \"var(--blue-800)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-inter)\", \"Inter\", \"sans-serif\"],\n        lora: [\"var(--font-lora)\", \"Lora\", \"serif\"],\n        inter: [\"var(--font-inter)\", \"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2982},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    allowedHosts: true,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1141},"server/db.ts":{"content":"import pg from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nconst { Pool } = pg;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle(pool, { schema });","size_bytes":394},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport net from \"net\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\n// ======= IPv4 fix =======\nnet.setDefaultAutoSelectFamily(false); // force IPv4 globally\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// ======= Logging middleware =======\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// ======= Register routes =======\n(async () => {\n  const server = await registerRoutes(app);\n\n  // ======= Error handling =======\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    if (!res.headersSent) {\n      res.status(status).json({ message });\n    }\n    console.error(err);\n  });\n\n  // ======= Vite setup for development =======\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ======= Start server =======\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  server.listen(\n    {\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    },\n    () => {\n      log(`serving on port ${port}`);\n    }\n  );\n})();\n","size_bytes":2033},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\n// Check if Replit Auth environment variables are configured\nconst isReplitAuthConfigured = \n  process.env.REPLIT_DOMAINS && \n  process.env.REPL_ID;\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000;\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  \n  // Only set up Replit Auth if environment variables are configured\n  if (!isReplitAuthConfigured) {\n    console.warn(\"⚠️  Replit Auth not configured - REPLIT_DOMAINS and REPL_ID required\");\n    console.warn(\"⚠️  Application running without authentication\");\n    return;\n  }\n\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  // If Replit Auth is not configured, block all protected routes\n  if (!isReplitAuthConfigured) {\n    return res.status(503).json({ \n      message: \"Authentication not configured. Please set REPLIT_DOMAINS and REPL_ID environment variables.\" \n    });\n  }\n\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4797},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertClientSchema, insertInvoiceSchema, insertInvoiceItemSchema, insertSettingsSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\n\n// Request-specific schemas with proper coercion\nconst invoiceRequestSchema = insertInvoiceSchema.extend({\n  date: z.coerce.date(),\n  dueDate: z.coerce.date(),\n});\n\nconst invoiceItemRequestSchema = insertInvoiceItemSchema.omit({ invoiceId: true });\n\nconst createInvoiceRequestSchema = z.object({\n  invoice: invoiceRequestSchema,\n  items: z.array(invoiceItemRequestSchema),\n});\n\nconst updateInvoiceRequestSchema = z.object({\n  invoice: invoiceRequestSchema.partial(),\n  items: z.array(invoiceItemRequestSchema).optional(),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication (Required for Replit Auth - blueprint:javascript_log_in_with_replit)\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Clients routes (Protected)\n  app.get(\"/api/clients\", isAuthenticated, async (req, res) => {\n    try {\n      const { search } = req.query;\n      let clients;\n      \n      if (search && typeof search === 'string') {\n        clients = await storage.searchClients(search);\n      } else {\n        clients = await storage.getClients();\n      }\n      \n      res.json(clients);\n    } catch (error) {\n      console.error(\"Error fetching clients:\", error);\n      res.status(500).json({ message: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error fetching client:\", error);\n      res.status(500).json({ message: \"Failed to fetch client\" });\n    }\n  });\n\n  app.post(\"/api/clients\", isAuthenticated, async (req, res) => {\n    try {\n      const clientData = insertClientSchema.parse(req.body);\n      const client = await storage.createClient(clientData);\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error creating client:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid client data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create client\" });\n    }\n  });\n\n  app.put(\"/api/clients/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const clientData = insertClientSchema.partial().parse(req.body);\n      const client = await storage.updateClient(req.params.id, clientData);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error updating client:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid client data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update client\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const success = await storage.deleteClient(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json({ message: \"Client deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting client:\", error);\n      res.status(500).json({ message: \"Failed to delete client\" });\n    }\n  });\n\n  // Invoices routes (Protected)\n  app.get(\"/api/invoices\", isAuthenticated, async (req, res) => {\n    try {\n      const invoices = await storage.getInvoices();\n      res.json(invoices);\n    } catch (error) {\n      console.error(\"Error fetching invoices:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoices\" });\n    }\n  });\n\n  app.get(\"/api/invoices/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const invoice = await storage.getInvoice(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error fetching invoice:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoice\" });\n    }\n  });\n\n  app.get(\"/api/invoices/number/:invoiceNumber\", isAuthenticated, async (req, res) => {\n    try {\n      const invoice = await storage.getInvoiceByNumber(req.params.invoiceNumber);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error fetching invoice:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoice\" });\n    }\n  });\n\n  app.post(\"/api/invoices\", isAuthenticated, async (req, res) => {\n    try {\n      const { invoice: invoiceData, items } = createInvoiceRequestSchema.parse(req.body);\n      const invoice = await storage.createInvoice(invoiceData, items);\n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error creating invoice:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid invoice data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create invoice\" });\n    }\n  });\n\n  app.put(\"/api/invoices/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const parsed = updateInvoiceRequestSchema.parse(req.body);\n      const invoice = await storage.updateInvoice(req.params.id, parsed.invoice, parsed.items);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error updating invoice:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid invoice data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update invoice\" });\n    }\n  });\n\n  app.delete(\"/api/invoices/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const success = await storage.deleteInvoice(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json({ message: \"Invoice deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting invoice:\", error);\n      res.status(500).json({ message: \"Failed to delete invoice\" });\n    }\n  });\n\n  app.get(\"/api/invoices/next/number\", isAuthenticated, async (req, res) => {\n    try {\n      const nextNumber = await storage.getNextInvoiceNumber();\n      res.json({ invoiceNumber: nextNumber });\n    } catch (error) {\n      console.error(\"Error getting next invoice number:\", error);\n      res.status(500).json({ message: \"Failed to get next invoice number\" });\n    }\n  });\n\n  // Public company name endpoint (for landing page)\n  app.get(\"/api/public/company-name\", async (req, res) => {\n    try {\n      const companyName = await storage.getSetting(\"companyName\");\n      res.json({ companyName: companyName || \"MOLLA ENTERPRISES\" });\n    } catch (error) {\n      console.error(\"Error fetching company name:\", error);\n      res.json({ companyName: \"MOLLA ENTERPRISES\" });\n    }\n  });\n\n  // Settings routes (Protected)\n  app.get(\"/api/settings\", isAuthenticated, async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.get(\"/api/settings/:key\", isAuthenticated, async (req, res) => {\n    try {\n      const value = await storage.getSetting(req.params.key);\n      if (value === undefined) {\n        return res.status(404).json({ message: \"Setting not found\" });\n      }\n      res.json({ key: req.params.key, value });\n    } catch (error) {\n      console.error(\"Error fetching setting:\", error);\n      res.status(500).json({ message: \"Failed to fetch setting\" });\n    }\n  });\n\n  app.post(\"/api/settings\", isAuthenticated, async (req, res) => {\n    try {\n      const { key, value } = insertSettingsSchema.parse(req.body);\n      await storage.setSetting(key, value);\n      res.json({ key, value });\n    } catch (error) {\n      console.error(\"Error setting value:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid setting data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to set value\" });\n    }\n  });\n\n  // Dashboard stats (Protected)\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9490},"server/storage.ts":{"content":"import { \n  clients, \n  invoices, \n  invoiceItems, \n  settings,\n  users,\n  type Client, \n  type InsertClient,\n  type Invoice,\n  type InsertInvoice,\n  type InvoiceItem,\n  type InsertInvoiceItem,\n  type Settings,\n  type InsertSettings,\n  type InvoiceWithClient,\n  type ClientWithInvoices,\n  type User,\n  type UpsertUser\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, ilike, sql } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations (Required for Replit Auth - blueprint:javascript_log_in_with_replit)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Clients\n  getClients(): Promise<Client[]>;\n  getClient(id: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, client: Partial<InsertClient>): Promise<Client | undefined>;\n  deleteClient(id: string): Promise<boolean>;\n  searchClients(query: string): Promise<Client[]>;\n\n  // Invoices\n  getInvoices(): Promise<InvoiceWithClient[]>;\n  getInvoice(id: string): Promise<InvoiceWithClient | undefined>;\n  getInvoiceByNumber(invoiceNumber: string): Promise<InvoiceWithClient | undefined>;\n  createInvoice(invoice: InsertInvoice, items: InsertInvoiceItem[]): Promise<InvoiceWithClient>;\n  updateInvoice(id: string, invoice: Partial<InsertInvoice>, items?: InsertInvoiceItem[]): Promise<InvoiceWithClient | undefined>;\n  deleteInvoice(id: string): Promise<boolean>;\n  getNextInvoiceNumber(): Promise<string>;\n\n  // Invoice Items\n  getInvoiceItems(invoiceId: string): Promise<InvoiceItem[]>;\n  \n  // Settings\n  getSetting(key: string): Promise<string | undefined>;\n  setSetting(key: string, value: string): Promise<void>;\n  getSettings(): Promise<Settings[]>;\n\n  // Dashboard Stats\n  getDashboardStats(): Promise<{\n    totalInvoices: number;\n    paidInvoices: number;\n    pendingInvoices: number;\n    totalClients: number;\n    totalRevenue: string;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (Required for Replit Auth - blueprint:javascript_log_in_with_replit)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Clients\n  async getClients(): Promise<Client[]> {\n    return await db.select().from(clients).orderBy(desc(clients.createdAt));\n  }\n\n  async getClient(id: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.id, id));\n    return client || undefined;\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const [client] = await db\n      .insert(clients)\n      .values(insertClient)\n      .returning();\n    return client;\n  }\n\n  async updateClient(id: string, updateClient: Partial<InsertClient>): Promise<Client | undefined> {\n    const [client] = await db\n      .update(clients)\n      .set(updateClient)\n      .where(eq(clients.id, id))\n      .returning();\n    return client || undefined;\n  }\n\n  async deleteClient(id: string): Promise<boolean> {\n    const result = await db.delete(clients).where(eq(clients.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async searchClients(query: string): Promise<Client[]> {\n    return await db\n      .select()\n      .from(clients)\n      .where(\n        ilike(clients.companyName, `%${query}%`)\n      )\n      .orderBy(desc(clients.createdAt));\n  }\n\n  // Invoices\n  async getInvoices(): Promise<InvoiceWithClient[]> {\n    const result = await db\n      .select()\n      .from(invoices)\n      .leftJoin(clients, eq(invoices.clientId, clients.id))\n      .orderBy(desc(invoices.createdAt));\n\n    const invoicesWithItems = await Promise.all(\n      result.map(async (row) => {\n        const items = await this.getInvoiceItems(row.invoices.id);\n        return {\n          ...row.invoices,\n          client: row.clients!,\n          items,\n        };\n      })\n    );\n\n    return invoicesWithItems;\n  }\n\n  async getInvoice(id: string): Promise<InvoiceWithClient | undefined> {\n    const [result] = await db\n      .select()\n      .from(invoices)\n      .leftJoin(clients, eq(invoices.clientId, clients.id))\n      .where(eq(invoices.id, id));\n\n    if (!result) return undefined;\n\n    const items = await this.getInvoiceItems(id);\n\n    return {\n      ...result.invoices,\n      client: result.clients!,\n      items,\n    };\n  }\n\n  async getInvoiceByNumber(invoiceNumber: string): Promise<InvoiceWithClient | undefined> {\n    const [result] = await db\n      .select()\n      .from(invoices)\n      .leftJoin(clients, eq(invoices.clientId, clients.id))\n      .where(eq(invoices.invoiceNumber, invoiceNumber));\n\n    if (!result) return undefined;\n\n    const items = await this.getInvoiceItems(result.invoices.id);\n\n    return {\n      ...result.invoices,\n      client: result.clients!,\n      items,\n    };\n  }\n\n  async createInvoice(insertInvoice: InsertInvoice, items: InsertInvoiceItem[]): Promise<InvoiceWithClient> {\n    // Create invoice\n    const [invoice] = await db\n      .insert(invoices)\n      .values(insertInvoice)\n      .returning();\n\n    // Create invoice items\n    const itemsWithInvoiceId = items.map(item => ({\n      ...item,\n      invoiceId: invoice.id,\n    }));\n\n    await db.insert(invoiceItems).values(itemsWithInvoiceId);\n\n    // Return invoice with client and items\n    return await this.getInvoice(invoice.id) as InvoiceWithClient;\n  }\n\n  async updateInvoice(id: string, updateInvoice: Partial<InsertInvoice>, items?: InsertInvoiceItem[]): Promise<InvoiceWithClient | undefined> {\n    // Update invoice\n    const [invoice] = await db\n      .update(invoices)\n      .set(updateInvoice)\n      .where(eq(invoices.id, id))\n      .returning();\n\n    if (!invoice) return undefined;\n\n    // Update items if provided\n    if (items) {\n      // Delete existing items\n      await db.delete(invoiceItems).where(eq(invoiceItems.invoiceId, id));\n      \n      // Insert new items\n      const itemsWithInvoiceId = items.map(item => ({\n        ...item,\n        invoiceId: id,\n      }));\n      \n      await db.insert(invoiceItems).values(itemsWithInvoiceId);\n    }\n\n    // Return updated invoice with client and items\n    return await this.getInvoice(id);\n  }\n\n  async deleteInvoice(id: string): Promise<boolean> {\n    const result = await db.delete(invoices).where(eq(invoices.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getNextInvoiceNumber(): Promise<string> {\n    const prefix = await this.getSetting('invoice_prefix') || 'INV-';\n    const lastInvoice = await db\n      .select()\n      .from(invoices)\n      .orderBy(desc(invoices.createdAt))\n      .limit(1);\n\n    if (lastInvoice.length === 0) {\n      return `${prefix}0001`;\n    }\n\n    const lastNumber = lastInvoice[0].invoiceNumber.replace(prefix, '');\n    const nextNumber = (parseInt(lastNumber) + 1).toString().padStart(4, '0');\n    return `${prefix}${nextNumber}`;\n  }\n\n  // Invoice Items\n  async getInvoiceItems(invoiceId: string): Promise<InvoiceItem[]> {\n    return await db\n      .select()\n      .from(invoiceItems)\n      .where(eq(invoiceItems.invoiceId, invoiceId));\n  }\n\n  // Settings\n  async getSetting(key: string): Promise<string | undefined> {\n    const [setting] = await db\n      .select()\n      .from(settings)\n      .where(eq(settings.key, key));\n    return setting?.value;\n  }\n\n  async setSetting(key: string, value: string): Promise<void> {\n    const existing = await db\n      .select()\n      .from(settings)\n      .where(eq(settings.key, key));\n\n    if (existing.length > 0) {\n      await db\n        .update(settings)\n        .set({ value })\n        .where(eq(settings.key, key));\n    } else {\n      await db\n        .insert(settings)\n        .values({ key, value });\n    }\n  }\n\n  async getSettings(): Promise<Settings[]> {\n    return await db.select().from(settings);\n  }\n\n  // Dashboard Stats\n  async getDashboardStats(): Promise<{\n    totalInvoices: number;\n    paidInvoices: number;\n    pendingInvoices: number;\n    totalClients: number;\n    totalRevenue: string;\n  }> {\n    const [totalInvoicesResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(invoices);\n\n    const [paidInvoicesResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(invoices)\n      .where(eq(invoices.status, 'paid'));\n\n    const [pendingInvoicesResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(invoices)\n      .where(and(\n        eq(invoices.status, 'sent'),\n      ));\n\n    const [totalClientsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(clients);\n\n    const [revenueResult] = await db\n      .select({ sum: sql<string>`COALESCE(sum(total), 0)` })\n      .from(invoices)\n      .where(eq(invoices.status, 'paid'));\n\n    return {\n      totalInvoices: totalInvoicesResult.count,\n      paidInvoices: paidInvoicesResult.count,\n      pendingInvoices: pendingInvoicesResult.count,\n      totalClients: totalClientsResult.count,\n      totalRevenue: revenueResult.sum || '0',\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9434},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, pgEnum, index, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Auth tables (Required for Replit Auth - blueprint:javascript_log_in_with_replit)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Enums\nexport const invoiceStatusEnum = pgEnum('invoice_status', ['draft', 'sent', 'paid', 'overdue']);\nexport const currencyEnum = pgEnum('currency', ['INR', 'USD', 'EUR', 'GBP']);\n\n// Tables\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyName: text(\"company_name\").notNull(),\n  contactPerson: text(\"contact_person\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: text(\"invoice_number\").notNull().unique(),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id, { onDelete: 'cascade' }),\n  date: timestamp(\"date\").notNull(),\n  dueDate: timestamp(\"due_date\").notNull(),\n  status: invoiceStatusEnum(\"status\").default('draft').notNull(),\n  currency: currencyEnum(\"currency\").default('INR').notNull(),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  taxAmount: decimal(\"tax_amount\", { precision: 10, scale: 2 }).notNull(),\n  discountAmount: decimal(\"discount_amount\", { precision: 10, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const invoiceItems = pgTable(\"invoice_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: varchar(\"invoice_id\").notNull().references(() => invoices.id, { onDelete: 'cascade' }),\n  description: text(\"description\").notNull(),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  rate: decimal(\"rate\", { precision: 10, scale: 2 }).notNull(),\n  taxRate: decimal(\"tax_rate\", { precision: 5, scale: 2 }).default('0').notNull(),\n  discountRate: decimal(\"discount_rate\", { precision: 5, scale: 2 }).default('0').notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const settings = pgTable(\"settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n});\n\n// Relations\nexport const clientsRelations = relations(clients, ({ many }) => ({\n  invoices: many(invoices),\n}));\n\nexport const invoicesRelations = relations(invoices, ({ one, many }) => ({\n  client: one(clients, {\n    fields: [invoices.clientId],\n    references: [clients.id],\n  }),\n  items: many(invoiceItems),\n}));\n\nexport const invoiceItemsRelations = relations(invoiceItems, ({ one }) => ({\n  invoice: one(invoices, {\n    fields: [invoiceItems.invoiceId],\n    references: [invoices.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInvoiceItemSchema = createInsertSchema(invoiceItems).omit({\n  id: true,\n});\n\nexport const insertSettingsSchema = createInsertSchema(settings).omit({\n  id: true,\n});\n\n// Types\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\n\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\n\nexport type InvoiceItem = typeof invoiceItems.$inferSelect;\nexport type InsertInvoiceItem = z.infer<typeof insertInvoiceItemSchema>;\n\nexport type Settings = typeof settings.$inferSelect;\nexport type InsertSettings = z.infer<typeof insertSettingsSchema>;\n\n// Extended types for API responses\nexport type InvoiceWithClient = Invoice & {\n  client: Client;\n  items: InvoiceItem[];\n};\n\nexport type ClientWithInvoices = Client & {\n  invoices: Invoice[];\n};\n","size_bytes":4920},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Navigation from \"@/components/layout/navigation\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Clients from \"@/pages/clients\";\nimport Invoices from \"@/pages/invoices\";\nimport Settings from \"@/pages/settings\";\nimport Landing from \"@/pages/Landing\";\nimport NotFound from \"@/pages/not-found\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600 dark:text-gray-400\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Landing />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Navigation />\n      <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/clients\" component={Clients} />\n          <Route path=\"/invoices\" component={Invoices} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1899},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 47.4%, 11.2%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 47.4%, 11.2%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 47.4%, 11.2%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --radius: 0.5rem;\n  \n  /* Custom colors for MOLLA ENTERPRISES branding */\n  --blue-gradient-start: hsl(217, 91%, 35%);\n  --blue-gradient-end: hsl(213, 93%, 68%);\n  --blue-800: hsl(217, 91%, 35%);\n  --blue-100: hsl(214, 95%, 93%);\n  --blue-600: hsl(221, 83%, 53%);\n  --blue-700: hsl(224, 76%, 48%);\n  \n  /* Typography */\n  --font-lora: 'Lora', serif;\n  --font-inter: 'Inter', sans-serif;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(210, 40%, 98%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(212.7, 26.8%, 83.9%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(210, 40%, 98%);\n  --sidebar-primary-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(212.7, 26.8%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n    font-family: var(--font-inter);\n  }\n}\n\n@layer components {\n  .gradient-bg {\n    background: linear-gradient(135deg, var(--blue-gradient-start) 0%, var(--blue-gradient-end) 100%);\n  }\n  \n  .font-lora {\n    font-family: var(--font-lora);\n  }\n  \n  .font-inter {\n    font-family: var(--font-inter);\n  }\n  \n  .invoice-preview {\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n  \n  .text-blue-800 {\n    color: var(--blue-800);\n  }\n  \n  .bg-blue-800 {\n    background-color: var(--blue-800);\n  }\n  \n  .text-blue-100 {\n    color: var(--blue-100);\n  }\n  \n  .bg-blue-100 {\n    background-color: var(--blue-100);\n  }\n}\n","size_bytes":3993},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/lib/pdf-generator.ts":{"content":"import html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport type { InvoiceWithClient } from '@shared/schema';\n\ndeclare global {\n  interface Window {\n    html2canvas: typeof html2canvas;\n    jsPDF: typeof jsPDF;\n  }\n}\n\nexport async function generatePDF(invoice: InvoiceWithClient): Promise<void> {\n  // Create a temporary container for the invoice\n  const tempContainer = document.createElement('div');\n  tempContainer.style.position = 'absolute';\n  tempContainer.style.left = '-9999px';\n  tempContainer.style.top = '0';\n  tempContainer.style.width = '210mm'; // A4 width (794px at 96dpi)\n  tempContainer.style.height = '297mm'; // A4 height (1123px at 96dpi)\n  tempContainer.style.backgroundColor = 'white';\n  tempContainer.style.fontFamily = 'Arial, sans-serif';\n  tempContainer.style.boxSizing = 'border-box';\n  document.body.appendChild(tempContainer);\n\n  try {\n    // Fetch settings for company details\n    const settingsResponse = await fetch('/api/settings');\n    const settings = settingsResponse.ok ? await settingsResponse.json() : [];\n    \n    const getSettingValue = (key: string, defaultValue: string = \"\") => {\n      const setting = settings.find((s: any) => s.key === key);\n      return setting?.value || defaultValue;\n    };\n\n    const formatCurrency = (amount: string) => {\n      const currency = invoice.currency || 'INR';\n      if (currency === 'INR') {\n        return new Intl.NumberFormat('en-IN', {\n          style: 'currency',\n          currency: 'INR',\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        }).format(parseFloat(amount));\n      }\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: currency,\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n      }).format(parseFloat(amount));\n    };\n\n    const formatDate = (dateString: string) => {\n      return new Date(dateString).toLocaleDateString('en-IN', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      });\n    };\n\n    const companyName = getSettingValue(\"companyName\", \"MOLLA ENTERPRISES\");\n    const companyEmail = getSettingValue(\"companyEmail\", \"abedinmolla1@gmail.com\");\n    const companyPhone = getSettingValue(\"companyPhone\", \"9681766016\");\n    const companyWhatsapp = getSettingValue(\"companyWhatsapp\", \"9681766016\");\n    const companyAddress = getSettingValue(\"companyAddress\", \"BAGNAN, HOWRAH, WEST BENGAL 711303\");\n\n    const bankName = getSettingValue(\"bankName\", \"State Bank of India\");\n    const accountNumber = getSettingValue(\"accountNumber\", \"1234567890\");\n    const ifscCode = getSettingValue(\"ifscCode\", \"SBIN0001234\");\n    const accountHolderName = getSettingValue(\"accountHolderName\", \"MOLLA ENTERPRISES\");\n    const upiId = getSettingValue(\"upiId\", \"abedinmolla1@paytm\");\n    const defaultDueDays = getSettingValue(\"defaultDueDays\", \"30\");\n\n    // Create the invoice HTML\n    tempContainer.innerHTML = `\n      <div style=\"background: white; width: 210mm; height: 297mm; padding: 0; margin: 0; font-family: Arial, sans-serif; box-sizing: border-box; display: flex; flex-direction: column; overflow: hidden;\">\n        <!-- Header Blue Geometric Design -->\n        <div style=\"position: relative; height: 50px; flex-shrink: 0;\">\n          <div style=\"position: absolute; top: 0; left: 0; width: 100%; height: 50px; background: linear-gradient(to right, #1e40af 0%, #1e3a8a 50%, #06b6d4 100%);\"></div>\n          <div style=\"position: absolute; top: 0; right: 0; width: 100px; height: 50px; background: linear-gradient(to left, #22d3ee, transparent); transform: skewX(12deg); transform-origin: top right;\"></div>\n        </div>\n        \n        <div style=\"padding: 12mm 15mm; flex: 1; display: flex; flex-direction: column;\">\n          <!-- Company Header -->\n          <div style=\"display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8mm;\">\n            <div>\n              <div style=\"margin: 6mm 0 5mm 0;\">\n                <div style=\"position: relative;\">\n                  <h1 style=\"font-family: Arial, sans-serif; font-size: 45px; font-weight: 900; margin: 0; line-height: 0.9; letter-spacing: -1px; text-transform: uppercase;\">\n                    <span style=\"color: #1e40af;\">MOLLA</span><span style=\"color: #06b6d4;\">ENTERPRISES</span>\n                  </h1>\n                  <div style=\"margin-top: 4px;\">\n                    <p style=\"font-family: Arial, sans-serif; font-size: 14px; font-weight: 500; color: #374151; margin: 0; letter-spacing: 0.3em; text-transform: uppercase;\">I N D U S T R I E S</p>\n                  </div>\n                  <div style=\"margin-top: 8px; padding-top: 6px; border-top: 1px solid #e5e7eb;\">\n                    <p style=\"font-family: Arial, sans-serif; font-size: 10px; font-weight: 500; color: #6b7280; margin: 0; font-style: italic;\">Modular homes and kitchen decoration</p>\n                  </div>\n                </div>\n              </div>\n              <div style=\"font-size: 10px; color: #6b7280; line-height: 1.4;\">\n                <p style=\"margin: 2px 0;\">${companyAddress}</p>\n                <p style=\"margin: 2px 0;\">☎ ${companyPhone} | ⚬ WhatsApp: ${companyWhatsapp}</p>\n                <p style=\"margin: 2px 0;\">✉ ${companyEmail}</p>\n              </div>\n            </div>\n            <div style=\"text-align: right; margin-top: 6mm;\">\n              <h2 style=\"font-size: 24px; font-weight: bold; color: #374151; margin: 0 0 12px 0;\">TAX INVOICE</h2>\n              <div style=\"font-size: 10px; color: #6b7280; line-height: 1.6;\">\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin: 6px 0;\">\n                  <span style=\"color: #9ca3af;\">${formatDate(invoice.date.toString())}</span>\n                </div>\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin: 6px 0;\">\n                  <span style=\"font-weight: 600;\">Invoice #</span>\n                  <span style=\"font-weight: bold;\">${invoice.invoiceNumber}</span>\n                </div>\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin: 6px 0;\">\n                  <span style=\"color: #9ca3af;\">Customer PO Reference Field</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Client Information -->\n          <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 10mm; margin-bottom: 8mm;\">\n            <div>\n              <h3 style=\"font-weight: bold; color: #374151; margin: 0 0 16px 0; font-size: 12px; letter-spacing: 1px;\">INVOICE TO</h3>\n              <div style=\"font-size: 12px; color: #374151; line-height: 1.6;\">\n                <p style=\"font-weight: 500; margin: 4px 0;\">${invoice.client.companyName}</p>\n                <p style=\"margin: 4px 0;\">${invoice.client.contactPerson}</p>\n                <p style=\"margin: 4px 0;\">${invoice.client.address}</p>\n                <p style=\"margin: 4px 0;\">${invoice.client.phone}</p>\n                <p style=\"margin: 4px 0;\">${invoice.client.email}</p>\n              </div>\n            </div>\n            <div>\n              <h3 style=\"font-weight: bold; color: #374151; margin: 0 0 16px 0; font-size: 12px; letter-spacing: 1px;\">SHIP TO</h3>\n              <div style=\"font-size: 12px; color: #374151; line-height: 1.6;\">\n                <p style=\"margin: 4px 0;\">${invoice.client.address}</p>\n                <p style=\"margin: 4px 0;\">${invoice.client.companyName}</p>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Items Table -->\n          <div style=\"margin-bottom: 6mm; flex: 1;\">\n            <table style=\"width: 100%; border-collapse: collapse;\">\n              <thead>\n                <tr style=\"background-color: #1e40af; color: white;\">\n                  <th style=\"padding: 8px; text-align: center; font-size: 9px; font-weight: bold; letter-spacing: 0.5px;\">ITEM NO.</th>\n                  <th style=\"padding: 8px; text-align: left; font-size: 9px; font-weight: bold; letter-spacing: 0.5px;\">DESCRIPTION</th>\n                  <th style=\"padding: 8px; text-align: center; font-size: 9px; font-weight: bold; letter-spacing: 0.5px;\">QTY</th>\n                  <th style=\"padding: 8px; text-align: right; font-size: 9px; font-weight: bold; letter-spacing: 0.5px;\">RATE</th>\n                  <th style=\"padding: 8px; text-align: center; font-size: 9px; font-weight: bold; letter-spacing: 0.5px;\">GST</th>\n                  <th style=\"padding: 8px; text-align: right; font-size: 9px; font-weight: bold; letter-spacing: 0.5px;\">AMOUNT</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${invoice.items.map((item, index) => `\n                  <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                    <td style=\"padding: 8px; font-size: 10px; text-align: center;\">Item${index + 1}</td>\n                    <td style=\"padding: 8px; font-size: 10px;\">\n                      <div>\n                        <p style=\"font-weight: 500; margin: 0;\">${item.description}</p>\n                      </div>\n                    </td>\n                    <td style=\"padding: 8px; font-size: 10px; text-align: center;\">${item.quantity}</td>\n                    <td style=\"padding: 8px; font-size: 10px; text-align: right;\">${formatCurrency(item.rate)}</td>\n                    <td style=\"padding: 8px; font-size: 10px; text-align: center;\">${item.taxRate}%</td>\n                    <td style=\"padding: 8px; font-size: 10px; text-align: right; font-weight: 500;\">${formatCurrency(item.amount)}</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n            </table>\n          </div>\n          \n          <!-- Thank you message -->\n          <div style=\"text-align: center; margin: 5mm 0;\">\n            <p style=\"color: #6b7280; font-style: italic; font-weight: 500; margin: 0; font-size: 11px;\">Thank you for your business.</p>\n          </div>\n          \n          <!-- Totals -->\n          <div style=\"display: flex; justify-content: flex-end; margin-bottom: 6mm;\">\n            <div style=\"width: 240px;\">\n              <div style=\"font-size: 10px; line-height: 1.4;\">\n                <div style=\"display: flex; justify-content: space-between; padding: 3px 0;\">\n                  <span style=\"color: #6b7280;\">Subtotal</span>\n                  <span style=\"text-align: right;\">${formatCurrency(invoice.subtotal)}</span>\n                </div>\n                ${parseFloat(invoice.taxAmount) > 0 ? `\n                  <div style=\"display: flex; justify-content: space-between; padding: 3px 0;\">\n                    <span style=\"color: #6b7280;\">Total GST 10%</span>\n                    <span style=\"text-align: right;\">${formatCurrency(invoice.taxAmount)}</span>\n                  </div>\n                ` : ''}\n                <div style=\"display: flex; justify-content: space-between; padding: 3px 0;\">\n                  <span style=\"color: #6b7280;\">Invoice Total</span>\n                  <span style=\"text-align: right; font-weight: 500;\">${formatCurrency(invoice.total)}</span>\n                </div>\n                <div style=\"display: flex; justify-content: space-between; padding: 3px 0;\">\n                  <span style=\"color: #6b7280;\">Total Net Payment</span>\n                  <span style=\"text-align: right;\">$0.00</span>\n                </div>\n                <div style=\"border-top: 2px solid #1e40af; padding-top: 6px; margin-top: 6px;\">\n                  <div style=\"display: flex; justify-content: space-between; padding: 3px 0;\">\n                    <span style=\"font-weight: bold; font-size: 14px;\">AMOUNT DUE</span>\n                    <span style=\"font-weight: bold; font-size: 14px; color: #1e40af;\">${formatCurrency(invoice.total)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Payment Details Footer -->\n          <div style=\"border-top: 1px solid #e5e7eb; padding-top: 6mm; margin-top: auto;\">\n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 8mm; font-size: 10px;\">\n              <div>\n                <h4 style=\"font-weight: 600; color: #374151; margin: 0 0 8px 0; font-size: 11px;\">Payment Details:</h4>\n                <div style=\"color: #6b7280; line-height: 1.4;\">\n                  <div style=\"margin-bottom: 4px;\"><strong>Bank:</strong> ${bankName}</div>\n                  <div style=\"margin-bottom: 4px;\"><strong>Account Number:</strong> ${accountNumber}</div>\n                  <div style=\"margin-bottom: 4px;\"><strong>IFSC Code:</strong> ${ifscCode}</div>\n                  <div style=\"margin-bottom: 4px;\"><strong>Account Holder:</strong> ${accountHolderName}</div>\n                  <div style=\"margin-bottom: 4px; padding-top: 4px;\"><strong>UPI ID:</strong> ${upiId}</div>\n                </div>\n              </div>\n              <div>\n                <h4 style=\"font-weight: 600; color: #374151; margin: 0 0 8px 0; font-size: 11px;\">Terms & Conditions:</h4>\n                <div style=\"color: #6b7280; font-size: 9px; line-height: 1.3;\">\n                  <p style=\"margin: 3px 0;\">• Payment is due within ${defaultDueDays} days from invoice date</p>\n                  <p style=\"margin: 3px 0;\">• Late payment may incur additional charges</p>\n                  <p style=\"margin: 3px 0;\">• All work completed as per agreed specifications</p>\n                  <p style=\"margin: 3px 0;\">• Please include invoice number with payment</p>\n                </div>\n              </div>\n            </div>\n            \n            <div style=\"text-align: center; margin-top: 6mm; padding-top: 4mm; border-top: 1px solid #e5e7eb;\">\n              <p style=\"color: #6b7280; font-size: 10px; margin: 0;\">\n                Due Date: <strong>${formatDate(invoice.dueDate.toString())}</strong>\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Footer Blue Geometric Design -->\n        <div style=\"position: relative; height: 50px; margin-top: auto; flex-shrink: 0;\">\n          <div style=\"background: linear-gradient(to right, #22d3ee 0%, #1e3a8a 50%, #1e40af 100%); height: 50px;\"></div>\n          <div style=\"position: absolute; bottom: 0; left: 0; width: 100px; height: 50px; background: linear-gradient(to right, #1e40af, transparent); transform: skewX(-12deg); transform-origin: bottom left;\"></div>\n          <div style=\"position: absolute; bottom: 6px; right: 12px; color: white; font-size: 8px; font-weight: 500; text-align: right; line-height: 1.3;\">\n            <p style=\"margin: 1px 0;\">${companyName} | ☎ ${companyPhone}</p>\n            <p style=\"margin: 1px 0;\">${companyAddress}</p>\n            <p style=\"margin: 1px 0;\">✉ ${companyEmail}</p>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Generate canvas from HTML\n    const canvas = await html2canvas(tempContainer, {\n      scale: 2,\n      useCORS: true,\n      allowTaint: true,\n      backgroundColor: '#ffffff',\n      width: tempContainer.offsetWidth,\n      height: tempContainer.offsetHeight,\n    });\n\n    // Create PDF\n    const imgData = canvas.toDataURL('image/png');\n    const pdf = new jsPDF({\n      orientation: 'portrait',\n      unit: 'mm',\n      format: 'a4',\n    });\n\n    const pdfWidth = pdf.internal.pageSize.getWidth();\n    const pdfHeight = pdf.internal.pageSize.getHeight();\n\n    pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);\n\n    // Download the PDF\n    pdf.save(`${invoice.invoiceNumber}.pdf`);\n\n  } catch (error) {\n    console.error('Error generating PDF:', error);\n    throw new Error('Failed to generate PDF');\n  } finally {\n    // Clean up\n    document.body.removeChild(tempContainer);\n  }\n}\n","size_bytes":15775},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Landing.tsx":{"content":"import { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Users, Settings, LogIn } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Landing() {\n  const { data: companyData } = useQuery<{ companyName: string }>({\n    queryKey: [\"/api/public/company-name\"],\n  });\n\n  const companyName = companyData?.companyName || \"MOLLA INDUSTRIES\";\n\n  useEffect(() => {\n    document.title = `${companyName} - Invoice Generator`;\n  }, [companyName]);\n\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex flex-col items-center justify-center p-4\">\n      <div className=\"max-w-4xl w-full text-center space-y-8\">\n        <div className=\"space-y-4\">\n          <h1 className=\"text-5xl md:text-6xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400 bg-clip-text text-transparent\" data-testid=\"text-app-title\">\n            {companyName}\n          </h1>\n          <p className=\"text-xl md:text-2xl text-gray-700 dark:text-gray-300\" data-testid=\"text-app-subtitle\">\n            Professional Invoice Management System\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-6 my-12\">\n          <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg\" data-testid=\"card-feature-invoices\">\n            <FileText className=\"w-12 h-12 mx-auto mb-4 text-blue-600 dark:text-blue-400\" />\n            <h3 className=\"text-lg font-semibold mb-2 text-gray-900 dark:text-white\">Invoice Management</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">Create, edit, and track invoices with ease</p>\n          </div>\n\n          <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg\" data-testid=\"card-feature-clients\">\n            <Users className=\"w-12 h-12 mx-auto mb-4 text-blue-600 dark:text-blue-400\" />\n            <h3 className=\"text-lg font-semibold mb-2 text-gray-900 dark:text-white\">Client Tracking</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">Manage your clients and their information</p>\n          </div>\n\n          <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg\" data-testid=\"card-feature-pdf\">\n            <Settings className=\"w-12 h-12 mx-auto mb-4 text-blue-600 dark:text-blue-400\" />\n            <h3 className=\"text-lg font-semibold mb-2 text-gray-900 dark:text-white\">PDF Generation</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">Export professional invoices as PDF</p>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <Button\n            onClick={handleLogin}\n            size=\"lg\"\n            className=\"px-8 py-6 text-lg bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600\"\n            data-testid=\"button-login\"\n          >\n            <LogIn className=\"mr-2 h-5 w-5\" />\n            Sign In with Google\n          </Button>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\" data-testid=\"text-secure-notice\">\n            Secure authentication powered by OAuth\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3270},"client/src/pages/clients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Search, Edit, Trash2 } from \"lucide-react\";\nimport type { Client } from \"@shared/schema\";\nimport ClientModal from \"@/components/modals/client-modal\";\n\nexport default function Clients() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingClient, setEditingClient] = useState<Client | null>(null);\n  const { toast } = useToast();\n\n  const { data: clients, isLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\", searchQuery ? { search: searchQuery } : {}],\n    queryFn: async () => {\n      const url = searchQuery \n        ? `/api/clients?search=${encodeURIComponent(searchQuery)}`\n        : \"/api/clients\";\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch clients\");\n      }\n      return response.json();\n    },\n  });\n\n  const deleteClientMutation = useMutation({\n    mutationFn: async (clientId: string) => {\n      await apiRequest(\"DELETE\", `/api/clients/${clientId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Client deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete client\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditClient = (client: Client) => {\n    setEditingClient(client);\n    setIsModalOpen(true);\n  };\n\n  const handleDeleteClient = async (clientId: string) => {\n    if (window.confirm(\"Are you sure you want to delete this client? This will also delete all associated invoices.\")) {\n      deleteClientMutation.mutate(clientId);\n    }\n  };\n\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n    setEditingClient(null);\n  };\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"font-lora text-3xl font-bold text-gray-900\" data-testid=\"page-title\">\n          Client Management\n        </h2>\n        <Button\n          onClick={() => setIsModalOpen(true)}\n          className=\"gradient-bg hover:opacity-90\"\n          data-testid=\"button-add-client\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Client\n        </Button>\n      </div>\n      \n      <Card>\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4 sm:mb-0\">All Clients</h3>\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search clients...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 w-full sm:w-64\"\n                data-testid=\"input-search-clients\"\n              />\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Name\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Phone\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Address\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {isLoading ? (\n                Array.from({ length: 5 }).map((_, i) => (\n                  <tr key={i}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-4 w-32\" />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-4 w-28\" />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-4 w-36\" />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex space-x-2\">\n                        <Skeleton className=\"h-8 w-8\" />\n                        <Skeleton className=\"h-8 w-8\" />\n                      </div>\n                    </td>\n                  </tr>\n                ))\n              ) : clients && clients.length === 0 ? (\n                <tr>\n                  <td colSpan={4} className=\"px-6 py-8 text-center text-gray-500\">\n                    {searchQuery \n                      ? \"No clients found matching your search.\"\n                      : \"No clients found. Add your first client to get started.\"\n                    }\n                  </td>\n                </tr>\n              ) : (\n                clients?.map((client) => (\n                  <tr key={client.id} data-testid={`client-row-${client.id}`}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {client.contactPerson}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {client.phone}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {client.address}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleEditClient(client)}\n                        className=\"text-blue-600 hover:text-blue-900\"\n                        data-testid={`button-edit-client-${client.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDeleteClient(client.id)}\n                        className=\"text-red-600 hover:text-red-900\"\n                        disabled={deleteClientMutation.isPending}\n                        data-testid={`button-delete-client-${client.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n\n      <ClientModal\n        isOpen={isModalOpen}\n        onClose={handleModalClose}\n        client={editingClient}\n      />\n    </div>\n  );\n}\n","size_bytes":7757},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  FileText, \n  CheckCircle, \n  Clock, \n  Users, \n  IndianRupee,\n  TrendingUp\n} from \"lucide-react\";\nimport type { InvoiceWithClient, Settings } from \"@shared/schema\";\n\ninterface DashboardStats {\n  totalInvoices: number;\n  paidInvoices: number;\n  pendingInvoices: number;\n  totalClients: number;\n  totalRevenue: string;\n}\n\nexport default function Dashboard() {\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: recentInvoices, isLoading: invoicesLoading } = useQuery<InvoiceWithClient[]>({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const { data: settings } = useQuery<Settings[]>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const getSettingValue = (key: string, defaultValue: string): string => {\n    const setting = settings?.find(s => s.key === key);\n    return setting?.value || defaultValue;\n  };\n\n  const companyName = getSettingValue(\"companyName\", \"MOLLA ENTERPRISES\");\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(parseFloat(amount));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      paid: { color: \"bg-green-100 text-green-800\", label: \"Paid\" },\n      sent: { color: \"bg-yellow-100 text-yellow-800\", label: \"Pending\" },\n      draft: { color: \"bg-gray-100 text-gray-800\", label: \"Draft\" },\n      overdue: { color: \"bg-red-100 text-red-800\", label: \"Overdue\" },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.draft;\n    \n    return (\n      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${config.color}`}>\n        {config.label}\n      </span>\n    );\n  };\n\n  const overdueInvoices = stats ? stats.totalInvoices - stats.paidInvoices - stats.pendingInvoices : 0;\n  const recentInvoicesList = recentInvoices?.slice(0, 5) || [];\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"font-lora text-3xl font-bold text-gray-900 mb-2\" data-testid=\"page-title\">\n          Welcome to {companyName}\n        </h2>\n        <p className=\"text-gray-600\">Manage your invoices and clients efficiently</p>\n      </div>\n      \n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 rounded-full bg-blue-100 text-blue-600 mr-4\">\n                <FileText className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Invoices</p>\n                {statsLoading ? (\n                  <Skeleton className=\"h-8 w-16\" />\n                ) : (\n                  <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-total-invoices\">\n                    {stats?.totalInvoices || 0}\n                  </p>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 rounded-full bg-green-100 text-green-600 mr-4\">\n                <CheckCircle className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Paid Invoices</p>\n                {statsLoading ? (\n                  <Skeleton className=\"h-8 w-16\" />\n                ) : (\n                  <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-paid-invoices\">\n                    {stats?.paidInvoices || 0}\n                  </p>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 rounded-full bg-yellow-100 text-yellow-600 mr-4\">\n                <Clock className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Pending</p>\n                {statsLoading ? (\n                  <Skeleton className=\"h-8 w-16\" />\n                ) : (\n                  <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-pending-invoices\">\n                    {stats?.pendingInvoices || 0}\n                  </p>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 rounded-full bg-purple-100 text-purple-600 mr-4\">\n                <Users className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Clients</p>\n                {statsLoading ? (\n                  <Skeleton className=\"h-8 w-16\" />\n                ) : (\n                  <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-total-clients\">\n                    {stats?.totalClients || 0}\n                  </p>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Revenue Card */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 rounded-full bg-emerald-100 text-emerald-600 mr-4\">\n                <TrendingUp className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n                {statsLoading ? (\n                  <Skeleton className=\"h-8 w-24\" />\n                ) : (\n                  <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-total-revenue\">\n                    {stats ? formatCurrency(stats.totalRevenue) : '₹0'}\n                  </p>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Recent Invoices */}\n      <Card>\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Recent Invoices</h3>\n        </div>\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Invoice\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Client\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Amount\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Date\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {invoicesLoading ? (\n                Array.from({ length: 3 }).map((_, i) => (\n                  <tr key={i}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-4 w-20\" />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-4 w-32\" />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-4 w-24\" />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-6 w-16\" />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-4 w-28\" />\n                    </td>\n                  </tr>\n                ))\n              ) : recentInvoicesList.length === 0 ? (\n                <tr>\n                  <td colSpan={5} className=\"px-6 py-8 text-center text-gray-500\">\n                    No invoices found. Create your first invoice to get started.\n                  </td>\n                </tr>\n              ) : (\n                recentInvoicesList.map((invoice) => (\n                  <tr key={invoice.id} data-testid={`invoice-row-${invoice.id}`}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {invoice.invoiceNumber}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {invoice.client.companyName}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {formatCurrency(invoice.total)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      {getStatusBadge(invoice.status)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {formatDate(invoice.date.toString())}\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10232},"client/src/pages/invoices.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Search, Edit, Trash2, Download, Eye } from \"lucide-react\";\nimport type { InvoiceWithClient } from \"@shared/schema\";\nimport InvoiceForm from \"@/components/invoice/invoice-form\";\nimport InvoiceModal from \"@/components/modals/invoice-modal\";\nimport { generatePDF } from \"@/lib/pdf-generator\";\n\nexport default function Invoices() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [showForm, setShowForm] = useState(false);\n  const [editingInvoice, setEditingInvoice] = useState<InvoiceWithClient | null>(null);\n  const [previewInvoice, setPreviewInvoice] = useState<InvoiceWithClient | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: invoices, isLoading } = useQuery<InvoiceWithClient[]>({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const deleteInvoiceMutation = useMutation({\n    mutationFn: async (invoiceId: string) => {\n      await apiRequest(\"DELETE\", `/api/invoices/${invoiceId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Invoice deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(parseFloat(amount));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      paid: { color: \"bg-green-100 text-green-800\", label: \"Paid\" },\n      sent: { color: \"bg-yellow-100 text-yellow-800\", label: \"Pending\" },\n      draft: { color: \"bg-gray-100 text-gray-800\", label: \"Draft\" },\n      overdue: { color: \"bg-red-100 text-red-800\", label: \"Overdue\" },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.draft;\n    \n    return (\n      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${config.color}`}>\n        {config.label}\n      </span>\n    );\n  };\n\n  const filteredInvoices = invoices?.filter((invoice) => {\n    const matchesSearch = \n      invoice.invoiceNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      invoice.client.companyName.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || invoice.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  const handleEditInvoice = (invoice: InvoiceWithClient) => {\n    setEditingInvoice(invoice);\n    setShowForm(true);\n  };\n\n  const handleDeleteInvoice = async (invoiceId: string) => {\n    if (window.confirm(\"Are you sure you want to delete this invoice?\")) {\n      deleteInvoiceMutation.mutate(invoiceId);\n    }\n  };\n\n  const handlePreviewInvoice = (invoice: InvoiceWithClient) => {\n    setPreviewInvoice(invoice);\n    setIsModalOpen(true);\n  };\n\n  const handleDownloadPDF = async (invoice: InvoiceWithClient) => {\n    try {\n      await generatePDF(invoice);\n      toast({\n        title: \"Success\",\n        description: \"PDF downloaded successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate PDF\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleFormClose = () => {\n    setShowForm(false);\n    setEditingInvoice(null);\n  };\n\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n    setPreviewInvoice(null);\n  };\n\n  if (showForm) {\n    return (\n      <InvoiceForm\n        invoice={editingInvoice}\n        onClose={handleFormClose}\n      />\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"font-lora text-3xl font-bold text-gray-900\" data-testid=\"page-title\">\n          Invoice Management\n        </h2>\n        <Button\n          onClick={() => setShowForm(true)}\n          className=\"gradient-bg hover:opacity-90\"\n          data-testid=\"button-create-invoice\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Invoice\n        </Button>\n      </div>\n      \n      <Card>\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">All Invoices</h3>\n            <div className=\"flex space-x-4\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"All Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"draft\">Draft</SelectItem>\n                  <SelectItem value=\"sent\">Pending</SelectItem>\n                  <SelectItem value=\"paid\">Paid</SelectItem>\n                  <SelectItem value=\"overdue\">Overdue</SelectItem>\n                </SelectContent>\n              </Select>\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search invoices...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-full sm:w-64\"\n                  data-testid=\"input-search-invoices\"\n                />\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Invoice\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Client\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Amount\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Date\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {isLoading ? (\n                Array.from({ length: 5 }).map((_, i) => (\n                  <tr key={i}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-4 w-20\" />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-4 w-32\" />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-4 w-24\" />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-6 w-16\" />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Skeleton className=\"h-4 w-28\" />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex space-x-2\">\n                        <Skeleton className=\"h-8 w-8\" />\n                        <Skeleton className=\"h-8 w-8\" />\n                        <Skeleton className=\"h-8 w-8\" />\n                        <Skeleton className=\"h-8 w-8\" />\n                      </div>\n                    </td>\n                  </tr>\n                ))\n              ) : filteredInvoices.length === 0 ? (\n                <tr>\n                  <td colSpan={6} className=\"px-6 py-8 text-center text-gray-500\">\n                    {searchQuery || statusFilter !== \"all\"\n                      ? \"No invoices found matching your criteria.\"\n                      : \"No invoices found. Create your first invoice to get started.\"\n                    }\n                  </td>\n                </tr>\n              ) : (\n                filteredInvoices.map((invoice) => (\n                  <tr key={invoice.id} data-testid={`invoice-row-${invoice.id}`}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {invoice.invoiceNumber}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {invoice.client.companyName}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {formatCurrency(invoice.total)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      {getStatusBadge(invoice.status)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {formatDate(invoice.date.toString())}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handlePreviewInvoice(invoice)}\n                        className=\"text-blue-600 hover:text-blue-900\"\n                        data-testid={`button-preview-invoice-${invoice.id}`}\n                        title=\"Preview\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDownloadPDF(invoice)}\n                        className=\"text-green-600 hover:text-green-900\"\n                        data-testid={`button-download-invoice-${invoice.id}`}\n                        title=\"Download PDF\"\n                      >\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleEditInvoice(invoice)}\n                        className=\"text-blue-600 hover:text-blue-900\"\n                        data-testid={`button-edit-invoice-${invoice.id}`}\n                        title=\"Edit\"\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDeleteInvoice(invoice.id)}\n                        className=\"text-red-600 hover:text-red-900\"\n                        disabled={deleteInvoiceMutation.isPending}\n                        data-testid={`button-delete-invoice-${invoice.id}`}\n                        title=\"Delete\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n\n      <InvoiceModal\n        invoice={previewInvoice}\n        isOpen={isModalOpen}\n        onClose={handleModalClose}\n      />\n    </div>\n  );\n}\n","size_bytes":12999},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Settings } from \"@shared/schema\";\n\ninterface SettingsForm {\n  defaultCurrency: string;\n  invoicePrefix: string;\n  nextInvoiceNumber: string;\n  defaultDueDays: string;\n  bankName: string;\n  accountNumber: string;\n  ifscCode: string;\n  accountHolderName: string;\n  upiId: string;\n  companyName: string;\n  companyEmail: string;\n  companyPhone: string;\n  companyWhatsapp: string;\n  companyAddress: string;\n}\n\nconst defaultSettings: SettingsForm = {\n  defaultCurrency: \"INR\",\n  invoicePrefix: \"INV-\",\n  nextInvoiceNumber: \"1\",\n  defaultDueDays: \"30\",\n  bankName: \"State Bank of India\",\n  accountNumber: \"1234567890\",\n  ifscCode: \"SBIN0001234\",\n  accountHolderName: \"MOLLA ENTERPRISES\",\n  upiId: \"abedinmolla1@paytm\",\n  companyName: \"MOLLA ENTERPRISES\",\n  companyEmail: \"abedinmolla1@gmail.com\",\n  companyPhone: \"9681766016\",\n  companyWhatsapp: \"9681766016\",\n  companyAddress: \"BAGNAN, HOWRAH, WEST BENGAL 711303\",\n};\n\nexport default function Settings() {\n  const [formData, setFormData] = useState<SettingsForm>(defaultSettings);\n  const { toast } = useToast();\n\n  const { data: settings, isLoading } = useQuery<Settings[]>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const saveSettingsMutation = useMutation({\n    mutationFn: async (setting: { key: string; value: string }) => {\n      await apiRequest(\"POST\", \"/api/settings\", setting);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Settings saved successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Load settings into form when data is available\n  useEffect(() => {\n    if (settings) {\n      const settingsMap = settings.reduce((acc, setting) => {\n        acc[setting.key] = setting.value;\n        return acc;\n      }, {} as Record<string, string>);\n\n      setFormData(prev => ({\n        ...prev,\n        ...settingsMap,\n      }));\n    }\n  }, [settings]);\n\n  const handleInputChange = (key: keyof SettingsForm, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [key]: value,\n    }));\n  };\n\n  const handleGeneralSettingsSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const generalSettings = [\n      { key: \"defaultCurrency\", value: formData.defaultCurrency },\n      { key: \"invoicePrefix\", value: formData.invoicePrefix },\n      { key: \"nextInvoiceNumber\", value: formData.nextInvoiceNumber },\n      { key: \"defaultDueDays\", value: formData.defaultDueDays },\n    ];\n\n    for (const setting of generalSettings) {\n      saveSettingsMutation.mutate(setting);\n    }\n  };\n\n  const handlePaymentSettingsSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const paymentSettings = [\n      { key: \"bankName\", value: formData.bankName },\n      { key: \"accountNumber\", value: formData.accountNumber },\n      { key: \"ifscCode\", value: formData.ifscCode },\n      { key: \"accountHolderName\", value: formData.accountHolderName },\n      { key: \"upiId\", value: formData.upiId },\n    ];\n\n    for (const setting of paymentSettings) {\n      saveSettingsMutation.mutate(setting);\n    }\n  };\n\n  const handleCompanyInfoSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const companySettings = [\n      { key: \"companyName\", value: formData.companyName },\n      { key: \"companyEmail\", value: formData.companyEmail },\n      { key: \"companyPhone\", value: formData.companyPhone },\n      { key: \"companyWhatsapp\", value: formData.companyWhatsapp },\n      { key: \"companyAddress\", value: formData.companyAddress },\n    ];\n\n    for (const setting of companySettings) {\n      saveSettingsMutation.mutate(setting);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div>\n        <div className=\"mb-6\">\n          <h2 className=\"font-lora text-3xl font-bold text-gray-900 mb-2\">Settings</h2>\n          <p className=\"text-gray-600\">Configure your invoice preferences and payment details</p>\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse space-y-4\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-10 bg-gray-200 rounded\"></div>\n                <div className=\"h-10 bg-gray-200 rounded\"></div>\n                <div className=\"h-10 bg-gray-200 rounded\"></div>\n                <div className=\"h-10 bg-gray-200 rounded\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"mb-6\">\n        <h2 className=\"font-lora text-3xl font-bold text-gray-900 mb-2\" data-testid=\"page-title\">\n          Settings\n        </h2>\n        <p className=\"text-gray-600\">Configure your invoice preferences and payment details</p>\n      </div>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* General Settings */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">General Settings</h3>\n            \n            <form onSubmit={handleGeneralSettingsSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"defaultCurrency\">Default Currency</Label>\n                <Select \n                  value={formData.defaultCurrency}\n                  onValueChange={(value) => handleInputChange(\"defaultCurrency\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-currency\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"INR\">Indian Rupee (₹)</SelectItem>\n                    <SelectItem value=\"USD\">US Dollar ($)</SelectItem>\n                    <SelectItem value=\"EUR\">Euro (€)</SelectItem>\n                    <SelectItem value=\"GBP\">British Pound (£)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"invoicePrefix\">Invoice Number Prefix</Label>\n                <Input\n                  id=\"invoicePrefix\"\n                  value={formData.invoicePrefix}\n                  onChange={(e) => handleInputChange(\"invoicePrefix\", e.target.value)}\n                  data-testid=\"input-invoice-prefix\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"nextInvoiceNumber\">Next Invoice Number</Label>\n                <Input\n                  id=\"nextInvoiceNumber\"\n                  type=\"number\"\n                  value={formData.nextInvoiceNumber}\n                  onChange={(e) => handleInputChange(\"nextInvoiceNumber\", e.target.value)}\n                  data-testid=\"input-next-invoice-number\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"defaultDueDays\">Default Due Days</Label>\n                <Input\n                  id=\"defaultDueDays\"\n                  type=\"number\"\n                  value={formData.defaultDueDays}\n                  onChange={(e) => handleInputChange(\"defaultDueDays\", e.target.value)}\n                  data-testid=\"input-default-due-days\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">Number of days from invoice date</p>\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"gradient-bg hover:opacity-90 w-full\"\n                disabled={saveSettingsMutation.isPending}\n                data-testid=\"button-save-general\"\n              >\n                Save General Settings\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n        \n        {/* Payment Settings */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Payment Details</h3>\n            \n            <form onSubmit={handlePaymentSettingsSubmit} className=\"space-y-4\">\n              <div className=\"border-b border-gray-200 pb-4\">\n                <h4 className=\"font-medium text-gray-900 mb-3\">Bank Transfer Details</h4>\n                \n                <div className=\"space-y-3\">\n                  <div>\n                    <Label htmlFor=\"bankName\">Bank Name</Label>\n                    <Input\n                      id=\"bankName\"\n                      value={formData.bankName}\n                      onChange={(e) => handleInputChange(\"bankName\", e.target.value)}\n                      data-testid=\"input-bank-name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"accountNumber\">Account Number</Label>\n                    <Input\n                      id=\"accountNumber\"\n                      value={formData.accountNumber}\n                      onChange={(e) => handleInputChange(\"accountNumber\", e.target.value)}\n                      data-testid=\"input-account-number\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"ifscCode\">IFSC Code</Label>\n                    <Input\n                      id=\"ifscCode\"\n                      value={formData.ifscCode}\n                      onChange={(e) => handleInputChange(\"ifscCode\", e.target.value)}\n                      data-testid=\"input-ifsc-code\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"accountHolderName\">Account Holder Name</Label>\n                    <Input\n                      id=\"accountHolderName\"\n                      value={formData.accountHolderName}\n                      onChange={(e) => handleInputChange(\"accountHolderName\", e.target.value)}\n                      data-testid=\"input-account-holder\"\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"pt-4\">\n                <h4 className=\"font-medium text-gray-900 mb-3\">UPI Details</h4>\n                \n                <div>\n                  <Label htmlFor=\"upiId\">UPI ID</Label>\n                  <Input\n                    id=\"upiId\"\n                    value={formData.upiId}\n                    onChange={(e) => handleInputChange(\"upiId\", e.target.value)}\n                    data-testid=\"input-upi-id\"\n                  />\n                </div>\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"gradient-bg hover:opacity-90 w-full\"\n                disabled={saveSettingsMutation.isPending}\n                data-testid=\"button-save-payment\"\n              >\n                Save Payment Details\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Company Information */}\n      <div className=\"mt-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Company Information</h3>\n            \n            <form onSubmit={handleCompanyInfoSubmit} className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label htmlFor=\"companyName\">Company Name</Label>\n                <Input\n                  id=\"companyName\"\n                  value={formData.companyName}\n                  onChange={(e) => handleInputChange(\"companyName\", e.target.value)}\n                  data-testid=\"input-company-name\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"companyEmail\">Email</Label>\n                <Input\n                  id=\"companyEmail\"\n                  type=\"email\"\n                  value={formData.companyEmail}\n                  onChange={(e) => handleInputChange(\"companyEmail\", e.target.value)}\n                  data-testid=\"input-company-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"companyPhone\">Phone</Label>\n                <Input\n                  id=\"companyPhone\"\n                  type=\"tel\"\n                  value={formData.companyPhone}\n                  onChange={(e) => handleInputChange(\"companyPhone\", e.target.value)}\n                  data-testid=\"input-company-phone\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"companyWhatsapp\">WhatsApp</Label>\n                <Input\n                  id=\"companyWhatsapp\"\n                  type=\"tel\"\n                  value={formData.companyWhatsapp}\n                  onChange={(e) => handleInputChange(\"companyWhatsapp\", e.target.value)}\n                  data-testid=\"input-company-whatsapp\"\n                />\n              </div>\n              \n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"companyAddress\">Address</Label>\n                <Textarea\n                  id=\"companyAddress\"\n                  rows={3}\n                  value={formData.companyAddress}\n                  onChange={(e) => handleInputChange(\"companyAddress\", e.target.value)}\n                  data-testid=\"textarea-company-address\"\n                />\n              </div>\n              \n              <div className=\"md:col-span-2\">\n                <Button\n                  type=\"submit\"\n                  className=\"gradient-bg hover:opacity-90\"\n                  disabled={saveSettingsMutation.isPending}\n                  data-testid=\"button-save-company\"\n                >\n                  Update Company Information\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14563},"client/src/components/invoice/invoice-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, X, ArrowLeft, Eye } from \"lucide-react\";\nimport InvoicePreview from \"./invoice-preview\";\nimport InvoiceModal from \"@/components/modals/invoice-modal\";\nimport type { Client, InvoiceWithClient, Settings } from \"@shared/schema\";\n\nconst invoiceItemSchema = z.object({\n  description: z.string().min(1, \"Description is required\"),\n  quantity: z.coerce.number().min(0.01, \"Quantity must be greater than 0\"),\n  rate: z.coerce.number().min(0, \"Rate must be non-negative\"),\n  taxRate: z.coerce.number().min(0).max(100),\n  discountRate: z.coerce.number().min(0).max(100),\n});\n\nconst invoiceFormSchema = z.object({\n  clientId: z.string().min(1, \"Please select a client\"),\n  date: z.string().min(1, \"Date is required\"),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  status: z.enum([\"draft\", \"sent\", \"paid\", \"overdue\"]),\n  currency: z.enum([\"INR\", \"USD\", \"EUR\", \"GBP\"]),\n  notes: z.string().optional(),\n  items: z.array(invoiceItemSchema).min(1, \"At least one item is required\"),\n});\n\ntype InvoiceFormData = z.infer<typeof invoiceFormSchema>;\n\ninterface InvoiceFormProps {\n  invoice?: InvoiceWithClient | null;\n  onClose: () => void;\n}\n\nexport default function InvoiceForm({ invoice, onClose }: InvoiceFormProps) {\n  const [showPreview, setShowPreview] = useState(false);\n  const [previewInvoice, setPreviewInvoice] = useState<InvoiceWithClient | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const { data: settings = [] } = useQuery<Settings[]>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const { data: nextInvoiceNumber } = useQuery<{ invoiceNumber: string }>({\n    queryKey: [\"/api/invoices/next/number\"],\n    enabled: !invoice, // Only fetch for new invoices\n  });\n\n  const getSettingValue = (key: string, defaultValue: string = \"\") => {\n    const setting = settings.find(s => s.key === key);\n    return setting?.value || defaultValue;\n  };\n\n  const defaultCurrency = getSettingValue(\"defaultCurrency\", \"INR\");\n  const defaultDueDays = parseInt(getSettingValue(\"defaultDueDays\", \"30\"));\n\n  const form = useForm<InvoiceFormData>({\n    resolver: zodResolver(invoiceFormSchema),\n    defaultValues: {\n      clientId: invoice?.clientId || \"\",\n      date: invoice?.date ? new Date(invoice.date).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],\n      dueDate: invoice?.dueDate ? new Date(invoice.dueDate).toISOString().split('T')[0] : \"\",\n      status: invoice?.status || \"draft\",\n      currency: invoice?.currency || defaultCurrency as any,\n      notes: invoice?.notes || \"\",\n      items: invoice?.items.map(item => ({\n        description: item.description,\n        quantity: parseFloat(item.quantity),\n        rate: parseFloat(item.rate),\n        taxRate: parseFloat(item.taxRate),\n        discountRate: parseFloat(item.discountRate),\n      })) || [\n        {\n          description: \"\",\n          quantity: undefined,\n          rate: undefined,\n          taxRate: 18,\n          discountRate: 0,\n        }\n      ],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"items\",\n  });\n\n  // Set due date automatically when date changes\n  useEffect(() => {\n    const subscription = form.watch((value, { name }) => {\n      if (name === \"date\" && value.date && !invoice) {\n        const invoiceDate = new Date(value.date);\n        const dueDate = new Date(invoiceDate);\n        dueDate.setDate(dueDate.getDate() + defaultDueDays);\n        form.setValue(\"dueDate\", dueDate.toISOString().split('T')[0]);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, [form, defaultDueDays, invoice]);\n\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: InvoiceFormData) => {\n      const { items, ...invoiceData } = data;\n      \n      // Calculate totals\n      const calculatedItems = items.map(item => {\n        const lineSubtotal = item.quantity * item.rate;\n        const discount = (lineSubtotal * item.discountRate) / 100;\n        const subtotalAfterDiscount = lineSubtotal - discount;\n        const tax = (subtotalAfterDiscount * item.taxRate) / 100;\n        const amount = subtotalAfterDiscount + tax;\n        \n        return {\n          description: item.description,\n          quantity: item.quantity.toString(),\n          rate: item.rate.toString(),\n          taxRate: item.taxRate.toString(),\n          discountRate: item.discountRate.toString(),\n          amount: amount.toString(),\n        };\n      });\n\n      const subtotal = calculatedItems.reduce((sum, item) => {\n        const lineSubtotal = parseFloat(item.quantity) * parseFloat(item.rate);\n        return sum + lineSubtotal;\n      }, 0);\n\n      const totalDiscount = calculatedItems.reduce((sum, item) => {\n        const lineSubtotal = parseFloat(item.quantity) * parseFloat(item.rate);\n        const discount = (lineSubtotal * parseFloat(item.discountRate)) / 100;\n        return sum + discount;\n      }, 0);\n\n      const totalTax = calculatedItems.reduce((sum, item) => {\n        const lineSubtotal = parseFloat(item.quantity) * parseFloat(item.rate);\n        const discount = (lineSubtotal * parseFloat(item.discountRate)) / 100;\n        const subtotalAfterDiscount = lineSubtotal - discount;\n        const tax = (subtotalAfterDiscount * parseFloat(item.taxRate)) / 100;\n        return sum + tax;\n      }, 0);\n\n      const total = subtotal - totalDiscount + totalTax;\n\n      const invoicePayload = {\n        ...invoiceData,\n        invoiceNumber: nextInvoiceNumber?.invoiceNumber || \"INV-0001\",\n        date: data.date,\n        dueDate: data.dueDate,\n        subtotal: subtotal.toString(),\n        taxAmount: totalTax.toString(),\n        discountAmount: totalDiscount.toString(),\n        total: total.toString(),\n      };\n\n      await apiRequest(\"POST\", \"/api/invoices\", {\n        invoice: invoicePayload,\n        items: calculatedItems,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Invoice created successfully\",\n      });\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateInvoiceMutation = useMutation({\n    mutationFn: async (data: InvoiceFormData) => {\n      if (!invoice) throw new Error(\"No invoice to update\");\n      \n      const { items, ...invoiceData } = data;\n      \n      // Calculate totals\n      const calculatedItems = items.map(item => {\n        const lineSubtotal = item.quantity * item.rate;\n        const discount = (lineSubtotal * item.discountRate) / 100;\n        const subtotalAfterDiscount = lineSubtotal - discount;\n        const tax = (subtotalAfterDiscount * item.taxRate) / 100;\n        const amount = subtotalAfterDiscount + tax;\n        \n        return {\n          description: item.description,\n          quantity: item.quantity.toString(),\n          rate: item.rate.toString(),\n          taxRate: item.taxRate.toString(),\n          discountRate: item.discountRate.toString(),\n          amount: amount.toString(),\n        };\n      });\n\n      const subtotal = calculatedItems.reduce((sum, item) => {\n        const lineSubtotal = parseFloat(item.quantity) * parseFloat(item.rate);\n        return sum + lineSubtotal;\n      }, 0);\n\n      const totalDiscount = calculatedItems.reduce((sum, item) => {\n        const lineSubtotal = parseFloat(item.quantity) * parseFloat(item.rate);\n        const discount = (lineSubtotal * parseFloat(item.discountRate)) / 100;\n        return sum + discount;\n      }, 0);\n\n      const totalTax = calculatedItems.reduce((sum, item) => {\n        const lineSubtotal = parseFloat(item.quantity) * parseFloat(item.rate);\n        const discount = (lineSubtotal * parseFloat(item.discountRate)) / 100;\n        const subtotalAfterDiscount = lineSubtotal - discount;\n        const tax = (subtotalAfterDiscount * parseFloat(item.taxRate)) / 100;\n        return sum + tax;\n      }, 0);\n\n      const total = subtotal - totalDiscount + totalTax;\n\n      const invoicePayload = {\n        ...invoiceData,\n        date: data.date,\n        dueDate: data.dueDate,\n        subtotal: subtotal.toString(),\n        taxAmount: totalTax.toString(),\n        discountAmount: totalDiscount.toString(),\n        total: total.toString(),\n      };\n\n      await apiRequest(\"PUT\", `/api/invoices/${invoice.id}`, {\n        invoice: invoicePayload,\n        items: calculatedItems,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Invoice updated successfully\",\n      });\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddItem = () => {\n    append({\n      description: \"\",\n      quantity: undefined,\n      rate: undefined,\n      taxRate: 18,\n      discountRate: 0,\n    });\n  };\n\n  const handleRemoveItem = (index: number) => {\n    if (fields.length > 1) {\n      remove(index);\n    }\n  };\n\n  const handlePreview = () => {\n    const formData = form.getValues();\n    const selectedClient = clients.find(c => c.id === formData.clientId);\n    \n    if (!selectedClient) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a client to preview the invoice\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate totals for preview\n    const calculatedItems = formData.items.map(item => {\n      const lineSubtotal = item.quantity * item.rate;\n      const discount = (lineSubtotal * item.discountRate) / 100;\n      const subtotalAfterDiscount = lineSubtotal - discount;\n      const tax = (subtotalAfterDiscount * item.taxRate) / 100;\n      const amount = subtotalAfterDiscount + tax;\n      \n      return {\n        id: Math.random().toString(), // Temporary ID for preview\n        invoiceId: \"preview\",\n        description: item.description,\n        quantity: item.quantity.toString(),\n        rate: item.rate.toString(),\n        taxRate: item.taxRate.toString(),\n        discountRate: item.discountRate.toString(),\n        amount: amount.toString(),\n      };\n    });\n\n    const subtotal = calculatedItems.reduce((sum, item) => {\n      const lineSubtotal = parseFloat(item.quantity) * parseFloat(item.rate);\n      return sum + lineSubtotal;\n    }, 0);\n\n    const totalDiscount = calculatedItems.reduce((sum, item) => {\n      const lineSubtotal = parseFloat(item.quantity) * parseFloat(item.rate);\n      const discount = (lineSubtotal * parseFloat(item.discountRate)) / 100;\n      return sum + discount;\n    }, 0);\n\n    const totalTax = calculatedItems.reduce((sum, item) => {\n      const lineSubtotal = parseFloat(item.quantity) * parseFloat(item.rate);\n      const discount = (lineSubtotal * parseFloat(item.discountRate)) / 100;\n      const subtotalAfterDiscount = lineSubtotal - discount;\n      const tax = (subtotalAfterDiscount * parseFloat(item.taxRate)) / 100;\n      return sum + tax;\n    }, 0);\n\n    const total = subtotal - totalDiscount + totalTax;\n\n    const previewData: InvoiceWithClient = {\n      id: \"preview\",\n      invoiceNumber: invoice?.invoiceNumber || nextInvoiceNumber?.invoiceNumber || \"INV-0001\",\n      clientId: formData.clientId,\n      date: formData.date,\n      dueDate: formData.dueDate,\n      status: formData.status,\n      currency: formData.currency,\n      subtotal: subtotal.toString(),\n      taxAmount: totalTax.toString(),\n      discountAmount: totalDiscount.toString(),\n      total: total.toString(),\n      notes: formData.notes || null,\n      createdAt: new Date().toISOString(),\n      client: selectedClient,\n      items: calculatedItems,\n    };\n\n    setPreviewInvoice(previewData);\n    setIsModalOpen(true);\n  };\n\n  const onSubmit = (data: InvoiceFormData) => {\n    if (invoice) {\n      updateInvoiceMutation.mutate(data);\n    } else {\n      createInvoiceMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createInvoiceMutation.isPending || updateInvoiceMutation.isPending;\n\n  // Calculate totals for display\n  const watchedItems = form.watch(\"items\");\n  const totals = watchedItems.reduce((acc, item) => {\n    const lineSubtotal = (item.quantity || 0) * (item.rate || 0);\n    const discount = (lineSubtotal * (item.discountRate || 0)) / 100;\n    const subtotalAfterDiscount = lineSubtotal - discount;\n    const tax = (subtotalAfterDiscount * (item.taxRate || 0)) / 100;\n    \n    acc.subtotal += lineSubtotal;\n    acc.discount += discount;\n    acc.tax += tax;\n    return acc;\n  }, { subtotal: 0, discount: 0, tax: 0 });\n\n  const grandTotal = totals.subtotal - totals.discount + totals.tax;\n\n  const formatCurrency = (amount: number) => {\n    const currency = form.watch(\"currency\") || defaultCurrency;\n    if (currency === \"INR\") {\n      return new Intl.NumberFormat('en-IN', {\n        style: 'currency',\n        currency: 'INR',\n        minimumFractionDigits: 2,\n      }).format(amount);\n    }\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={onClose}\n            className=\"text-gray-600 hover:text-gray-900\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n          <h2 className=\"font-lora text-3xl font-bold text-gray-900\" data-testid=\"page-title\">\n            {invoice ? \"Edit Invoice\" : \"Create New Invoice\"}\n          </h2>\n        </div>\n        <Button\n          onClick={handlePreview}\n          variant=\"outline\"\n          className=\"text-gray-600 hover:text-gray-900\"\n          data-testid=\"button-preview\"\n        >\n          <Eye className=\"h-4 w-4 mr-2\" />\n          Preview\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Form Section */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Invoice Details</h3>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                {/* Invoice Number and Date */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Invoice Number</Label>\n                    <Input\n                      value={invoice?.invoiceNumber || nextInvoiceNumber?.invoiceNumber || \"INV-0001\"}\n                      disabled\n                      className=\"bg-gray-50 text-gray-500\"\n                      data-testid=\"input-invoice-number\"\n                    />\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"date\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"date\"\n                            {...field}\n                            data-testid=\"input-date\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Client and Due Date */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"clientId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Select Client</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-client\">\n                              <SelectValue placeholder=\"Choose a client...\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {clients.map((client) => (\n                              <SelectItem key={client.id} value={client.id}>\n                                {client.companyName}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"dueDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Due Date</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"date\"\n                            {...field}\n                            data-testid=\"input-due-date\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Status and Currency */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Status</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-status\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"draft\">Draft</SelectItem>\n                            <SelectItem value=\"sent\">Sent</SelectItem>\n                            <SelectItem value=\"paid\">Paid</SelectItem>\n                            <SelectItem value=\"overdue\">Overdue</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"currency\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Currency</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-currency\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"INR\">Indian Rupee (₹)</SelectItem>\n                            <SelectItem value=\"USD\">US Dollar ($)</SelectItem>\n                            <SelectItem value=\"EUR\">Euro (€)</SelectItem>\n                            <SelectItem value=\"GBP\">British Pound (£)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Items Section */}\n                <div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <Label className=\"text-sm font-medium text-gray-700\">Invoice Items</Label>\n                    <Button\n                      type=\"button\"\n                      onClick={handleAddItem}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"text-blue-600 hover:text-blue-800\"\n                      data-testid=\"button-add-item\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-1\" />\n                      Add Item\n                    </Button>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    {fields.map((field, index) => (\n                      <div key={field.id} className=\"grid grid-cols-12 gap-2 p-3 border border-gray-200 rounded-md\">\n                        <div className=\"col-span-4\">\n                          <FormField\n                            control={form.control}\n                            name={`items.${index}.description`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormControl>\n                                  <Input\n                                    placeholder=\"Item Name / Description\"\n                                    {...field}\n                                    className=\"text-sm\"\n                                    data-testid={`input-item-description-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <div className=\"col-span-2\">\n                          <FormField\n                            control={form.control}\n                            name={`items.${index}.quantity`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormControl>\n                                  <Input\n                                    type=\"number\"\n                                    step=\"0.01\"\n                                    placeholder=\"Quantity\"\n                                    {...field}\n                                    onChange={(e) => field.onChange(e.target.value)}\n                                    value={field.value ?? \"\"}\n                                    className=\"text-sm\"\n                                    data-testid={`input-item-quantity-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <div className=\"col-span-2\">\n                          <FormField\n                            control={form.control}\n                            name={`items.${index}.rate`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormControl>\n                                  <Input\n                                    type=\"number\"\n                                    step=\"0.01\"\n                                    placeholder=\"Rate / Price\"\n                                    {...field}\n                                    onChange={(e) => field.onChange(e.target.value)}\n                                    value={field.value ?? \"\"}\n                                    className=\"text-sm\"\n                                    data-testid={`input-item-rate-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <div className=\"col-span-2\">\n                          <FormField\n                            control={form.control}\n                            name={`items.${index}.taxRate`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormControl>\n                                  <Input\n                                    type=\"number\"\n                                    step=\"0.01\"\n                                    placeholder=\"GST/Tax %\"\n                                    {...field}\n                                    onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                    className=\"text-sm\"\n                                    data-testid={`input-item-tax-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <div className=\"col-span-1\">\n                          <FormField\n                            control={form.control}\n                            name={`items.${index}.discountRate`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormControl>\n                                  <Input\n                                    type=\"number\"\n                                    step=\"0.01\"\n                                    placeholder=\"Discount %\"\n                                    {...field}\n                                    onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                    className=\"text-sm\"\n                                    data-testid={`input-item-discount-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <div className=\"col-span-1 flex items-center\">\n                          <Button\n                            type=\"button\"\n                            onClick={() => handleRemoveItem(index)}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-red-600 hover:text-red-800 p-0\"\n                            disabled={fields.length === 1}\n                            data-testid={`button-remove-item-${index}`}\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Totals */}\n                <div className=\"bg-gray-50 p-4 rounded-md\">\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Subtotal:</span>\n                      <span className=\"font-medium\" data-testid=\"text-subtotal\">\n                        {formatCurrency(totals.subtotal)}\n                      </span>\n                    </div>\n                    {totals.tax > 0 && (\n                      <div className=\"flex justify-between\">\n                        <span>Tax:</span>\n                        <span className=\"font-medium\" data-testid=\"text-tax\">\n                          {formatCurrency(totals.tax)}\n                        </span>\n                      </div>\n                    )}\n                    {totals.discount > 0 && (\n                      <div className=\"flex justify-between\">\n                        <span>Discount:</span>\n                        <span className=\"font-medium text-red-600\" data-testid=\"text-discount\">\n                          -{formatCurrency(totals.discount)}\n                        </span>\n                      </div>\n                    )}\n                    <div className=\"flex justify-between text-lg font-bold border-t pt-2\">\n                      <span>Total:</span>\n                      <span data-testid=\"text-total\">\n                        {formatCurrency(grandTotal)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Notes */}\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes (Optional)</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Add any additional notes...\"\n                          {...field}\n                          data-testid=\"input-notes\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Action Buttons */}\n                <div className=\"flex space-x-3 pt-4\">\n                  <Button\n                    type=\"submit\"\n                    className=\"gradient-bg hover:opacity-90\"\n                    disabled={isLoading}\n                    data-testid=\"button-save-invoice\"\n                  >\n                    {invoice ? \"Update Invoice\" : \"Save Invoice\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={onClose}\n                    disabled={isLoading}\n                    data-testid=\"button-cancel-invoice\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Live Preview */}\n        <Card className=\"max-h-[800px] overflow-y-auto\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Live Preview</h3>\n            <div className=\"border border-gray-200 rounded-lg overflow-hidden\">\n              {previewInvoice ? (\n                <div className=\"transform scale-[0.7] origin-top-left w-[142.86%]\">\n                  <InvoicePreview invoice={previewInvoice} />\n                </div>\n              ) : (\n                <div className=\"p-8 text-center text-gray-500\">\n                  Select a client and add items to see the live preview\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <InvoiceModal\n        invoice={previewInvoice}\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":31768},"client/src/components/invoice/invoice-preview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { InvoiceWithClient, Settings } from \"@shared/schema\";\nimport { Phone, MessageCircle, Mail } from \"lucide-react\";\n\ninterface InvoicePreviewProps {\n  invoice: InvoiceWithClient;\n  className?: string;\n}\n\nexport default function InvoicePreview({ invoice, className = \"\" }: InvoicePreviewProps) {\n  const { data: settings = [] } = useQuery<Settings[]>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const getSettingValue = (key: string, defaultValue: string = \"\") => {\n    const setting = settings.find(s => s.key === key);\n    return setting?.value || defaultValue;\n  };\n\n  const formatCurrency = (amount: string) => {\n    const currency = getSettingValue(\"defaultCurrency\", \"INR\");\n    if (currency === \"INR\") {\n      return new Intl.NumberFormat('en-IN', {\n        style: 'currency',\n        currency: 'INR',\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n      }).format(parseFloat(amount));\n    }\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(parseFloat(amount));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const companyName = getSettingValue(\"companyName\", \"MOLLA ENTERPRISES\");\n  const companyEmail = getSettingValue(\"companyEmail\", \"abedinmolla1@gmail.com\");\n  const companyPhone = getSettingValue(\"companyPhone\", \"9681766016\");\n  const companyWhatsapp = getSettingValue(\"companyWhatsapp\", \"9681766016\");\n  const companyAddress = getSettingValue(\"companyAddress\", \"BAGNAN, HOWRAH, WEST BENGAL 711303\");\n\n  const bankName = getSettingValue(\"bankName\", \"State Bank of India\");\n  const accountNumber = getSettingValue(\"accountNumber\", \"1234567890\");\n  const ifscCode = getSettingValue(\"ifscCode\", \"SBIN0001234\");\n  const accountHolderName = getSettingValue(\"accountHolderName\", \"MOLLA ENTERPRISES\");\n  const upiId = getSettingValue(\"upiId\", \"abedinmolla1@paytm\");\n\n  return (\n    <div className={`bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm ${className}`} id=\"invoice-preview\">\n      {/* Header Blue Geometric Design */}\n      <div className=\"relative h-16\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-800 via-blue-700 to-cyan-500\"></div>\n        <div className=\"absolute top-0 right-0 w-32 h-16 bg-gradient-to-l from-cyan-400 to-transparent transform skew-x-12\"></div>\n      </div>\n      \n      <div className=\"p-8\">\n        {/* Company Header */}\n        <div className=\"flex justify-between items-start mb-8\">\n          <div>\n            <div className=\"mb-8 mt-20\" data-testid=\"company-name\">\n              <div className=\"relative\">\n                <h1 className=\"font-sans text-4xl md:text-5xl font-black mb-1 tracking-tight uppercase leading-none\">\n                  <span className=\"text-blue-800\">MOLLA</span><span className=\"text-cyan-500\">ENTERPRISES</span>\n                </h1>\n                <div className=\"mt-1\">\n                  <p className=\"font-sans text-sm font-medium text-gray-700 tracking-[0.3em] uppercase\">I N D U S T R I E S</p>\n                </div>\n                <div className=\"mt-3 pt-2 border-t border-gray-200\">\n                  <p className=\"font-sans text-sm font-medium text-gray-600 italic\">Modular homes and kitchen decoration</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"text-sm text-gray-600 space-y-1\">\n              <p>{companyAddress}</p>\n              <p className=\"flex items-center gap-2\">\n                <Phone className=\"w-4 h-4\" /> {companyPhone} | <MessageCircle className=\"w-4 h-4\" /> {companyWhatsapp}\n              </p>\n              <p className=\"flex items-center gap-2\">\n                <Mail className=\"w-4 h-4\" /> {companyEmail}\n              </p>\n            </div>\n          </div>\n          <div className=\"text-right mt-20\">\n            <h2 className=\"text-3xl font-bold text-gray-800 mb-4\">TAX INVOICE</h2>\n            <div className=\"text-sm text-gray-600 space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-500\">{formatDate(invoice.date.toString())}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">Invoice #</span>\n                <span className=\"font-bold\">{invoice.invoiceNumber}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-500\">Customer PO Reference Field</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Client Information */}\n        <div className=\"grid grid-cols-2 gap-16 mb-12\">\n          <div>\n            <h3 className=\"font-bold text-gray-800 mb-4 text-sm tracking-wide\">INVOICE TO</h3>\n            <div className=\"text-sm text-gray-700 space-y-1 leading-relaxed\">\n              <p className=\"font-medium\">{invoice.client.companyName}</p>\n              <p>{invoice.client.contactPerson}</p>\n              <p>{invoice.client.address}</p>\n              <p>{invoice.client.phone}</p>\n              <p>{invoice.client.email}</p>\n            </div>\n          </div>\n          <div>\n            <h3 className=\"font-bold text-gray-800 mb-4 text-sm tracking-wide\">SHIP TO</h3>\n            <div className=\"text-sm text-gray-700 space-y-1 leading-relaxed\">\n              <p>{invoice.client.address}</p>\n              <p>{invoice.client.companyName}</p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Items Table */}\n        <div className=\"mb-8\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"bg-blue-800 text-white\">\n                <th className=\"px-3 py-3 text-center text-xs font-bold tracking-wide\">QTY</th>\n                <th className=\"px-3 py-3 text-center text-xs font-bold tracking-wide\">ITEM NO.</th>\n                <th className=\"px-3 py-3 text-left text-xs font-bold tracking-wide\">DESCRIPTION</th>\n                <th className=\"px-3 py-3 text-right text-xs font-bold tracking-wide\">UNIT PRICE</th>\n                <th className=\"px-3 py-3 text-center text-xs font-bold tracking-wide\">GST</th>\n                <th className=\"px-3 py-3 text-right text-xs font-bold tracking-wide\">AMOUNT</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {invoice.items.map((item, index) => (\n                <tr key={item.id || index} className=\"hover:bg-gray-50\">\n                  <td className=\"px-3 py-3 text-sm text-center\">{item.quantity}</td>\n                  <td className=\"px-3 py-3 text-sm text-center\">Item{index + 1}</td>\n                  <td className=\"px-3 py-3 text-sm\">\n                    <div>\n                      <p className=\"font-medium\">{item.description}</p>\n                    </div>\n                  </td>\n                  <td className=\"px-3 py-3 text-sm text-right\">{formatCurrency(item.rate)}</td>\n                  <td className=\"px-3 py-3 text-sm text-center\">{item.taxRate}%</td>\n                  <td className=\"px-3 py-3 text-sm text-right font-medium\">{formatCurrency(item.amount)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        \n        {/* Thank you message */}\n        <div className=\"text-center mb-8 mt-8\">\n          <p className=\"text-gray-600 italic font-medium\">Thank you for your business.</p>\n        </div>\n        \n        {/* Totals */}\n        <div className=\"flex justify-end mb-8\">\n          <div className=\"w-72\">\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between py-1\">\n                <span className=\"text-gray-600\">Subtotal</span>\n                <span className=\"text-right\">{formatCurrency(invoice.subtotal)}</span>\n              </div>\n              {parseFloat(invoice.taxAmount) > 0 && (\n                <div className=\"flex justify-between py-1\">\n                  <span className=\"text-gray-600\">Total GST 10%</span>\n                  <span className=\"text-right\">{formatCurrency(invoice.taxAmount)}</span>\n                </div>\n              )}\n              <div className=\"flex justify-between py-1\">\n                <span className=\"text-gray-600\">Invoice Total</span>\n                <span className=\"text-right font-medium\">{formatCurrency(invoice.total)}</span>\n              </div>\n              <div className=\"flex justify-between py-1\">\n                <span className=\"text-gray-600\">Total Net Payment</span>\n                <span className=\"text-right\">$0.00</span>\n              </div>\n              <div className=\"border-t-2 border-blue-800 pt-2 mt-2\">\n                <div className=\"flex justify-between py-1\">\n                  <span className=\"font-bold text-lg\">AMOUNT DUE</span>\n                  <span className=\"font-bold text-lg text-blue-800\">{formatCurrency(invoice.total)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Payment Details Footer */}\n        <div className=\"border-t pt-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 text-sm\">\n            <div>\n              <h4 className=\"font-semibold text-gray-800 mb-3\">Payment Details:</h4>\n              <div className=\"text-gray-600 space-y-2\">\n                <div><strong>Bank:</strong> {bankName}</div>\n                <div><strong>Account Number:</strong> {accountNumber}</div>\n                <div><strong>IFSC Code:</strong> {ifscCode}</div>\n                <div><strong>Account Holder:</strong> {accountHolderName}</div>\n                <div className=\"pt-2\"><strong>UPI ID:</strong> {upiId}</div>\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-gray-800 mb-3\">Terms & Conditions:</h4>\n              <div className=\"text-gray-600 space-y-1 text-xs\">\n                <p>• Payment is due within {getSettingValue(\"defaultDueDays\", \"30\")} days from invoice date</p>\n                <p>• Late payment may incur additional charges</p>\n                <p>• All work completed as per agreed specifications</p>\n                <p>• Please include invoice number with payment</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"text-center mt-8 pt-4 border-t\">\n            <p className=\"text-gray-500 text-sm\">\n              Due Date: <strong>{formatDate(invoice.dueDate.toString())}</strong>\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Footer Blue Geometric Design */}\n      <div className=\"relative\">\n        <div className=\"bg-gradient-to-r from-cyan-400 via-blue-700 to-blue-800 h-16\"></div>\n        <div className=\"absolute bottom-0 left-0 w-32 h-16 bg-gradient-to-r from-blue-800 to-transparent transform -skew-x-12\"></div>\n        <div className=\"absolute bottom-2 right-4 text-white text-xs font-medium\">\n          <p className=\"flex items-center justify-end gap-1\">{companyName} | <Phone className=\"w-3 h-3\" /> {companyPhone}</p>\n          <p className=\"text-right\">{companyAddress}</p>\n          <p className=\"text-right flex items-center justify-end gap-1\"><Mail className=\"w-3 h-3\" /> {companyEmail}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11536},"client/src/components/layout/navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  LayoutDashboard, \n  Users, \n  FileText, \n  Settings, \n  Menu, \n  X,\n  LogOut\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Settings as SettingsType } from \"@shared/schema\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const { user } = useAuth();\n\n  const { data: settings } = useQuery<SettingsType[]>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const getSettingValue = (key: string, defaultValue: string): string => {\n    const setting = settings?.find(s => s.key === key);\n    return setting?.value || defaultValue;\n  };\n\n  const companyName = getSettingValue(\"companyName\", \"MOLLA ENTERPRISES\");\n\n  useEffect(() => {\n    document.title = `${companyName} - Invoice Generator`;\n  }, [companyName]);\n\n  const navItems = [\n    { path: \"/dashboard\", label: \"Dashboard\", icon: LayoutDashboard },\n    { path: \"/clients\", label: \"Clients\", icon: Users },\n    { path: \"/invoices\", label: \"Invoices\", icon: FileText },\n    { path: \"/settings\", label: \"Settings\", icon: Settings },\n  ];\n\n  const isActive = (path: string) => {\n    return location === path || (path === \"/dashboard\" && location === \"/\");\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <nav className=\"gradient-bg shadow-lg sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-white\">\n              <h1 className=\"font-lora text-4xl font-black tracking-wide\" data-testid=\"company-name\">\n                {companyName}\n              </h1>\n              <p className=\"text-blue-100 text-sm font-medium\">Professional Invoice Generator</p>\n            </div>\n          </div>\n          \n          <div className=\"hidden md:flex items-center space-x-4\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              return (\n                <Link key={item.path} href={item.path}>\n                  <button\n                    className={`flex items-center px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 border-b-2 ${\n                      isActive(item.path)\n                        ? \"text-white border-white\"\n                        : \"text-blue-100 hover:text-white border-transparent hover:border-blue-100\"\n                    }`}\n                    data-testid={`nav-${item.label.toLowerCase()}`}\n                  >\n                    <Icon className=\"h-4 w-4 mr-2\" />\n                    {item.label}\n                  </button>\n                </Link>\n              );\n            })}\n            <Button\n              onClick={handleLogout}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"text-white border-white hover:bg-blue-700 hover:text-white\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n          \n          <div className=\"md:hidden\">\n            <button\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              className=\"text-white hover:text-blue-100 p-2\"\n              data-testid=\"mobile-menu-toggle\"\n            >\n              {mobileMenuOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Mobile Menu */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden bg-blue-800 border-t border-blue-600\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              return (\n                <Link key={item.path} href={item.path}>\n                  <button\n                    onClick={() => setMobileMenuOpen(false)}\n                    className={`flex items-center w-full text-left px-3 py-2 rounded-md text-base font-medium ${\n                      isActive(item.path)\n                        ? \"text-white bg-blue-700\"\n                        : \"text-blue-100 hover:text-white hover:bg-blue-700\"\n                    }`}\n                    data-testid={`mobile-nav-${item.label.toLowerCase()}`}\n                  >\n                    <Icon className=\"h-5 w-5 mr-3\" />\n                    {item.label}\n                  </button>\n                </Link>\n              );\n            })}\n            <button\n              onClick={handleLogout}\n              className=\"flex items-center w-full text-left px-3 py-2 rounded-md text-base font-medium text-blue-100 hover:text-white hover:bg-blue-700\"\n              data-testid=\"mobile-button-logout\"\n            >\n              <LogOut className=\"h-5 w-5 mr-3\" />\n              Logout\n            </button>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}\n","size_bytes":5170},"client/src/components/modals/client-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Client, InsertClient } from \"@shared/schema\";\n\ninterface ClientModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  client?: Client | null;\n}\n\nexport default function ClientModal({ isOpen, onClose, client }: ClientModalProps) {\n  const [formData, setFormData] = useState<InsertClient>({\n    companyName: \"\",\n    contactPerson: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n  });\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (client) {\n      setFormData({\n        companyName: client.companyName,\n        contactPerson: client.contactPerson,\n        email: client.email,\n        phone: client.phone,\n        address: client.address,\n      });\n    } else {\n      setFormData({\n        companyName: \"\",\n        contactPerson: \"\",\n        email: \"\",\n        phone: \"\",\n        address: \"\",\n      });\n    }\n  }, [client]);\n\n  const createClientMutation = useMutation({\n    mutationFn: async (data: InsertClient) => {\n      await apiRequest(\"POST\", \"/api/clients\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Client created successfully\",\n      });\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create client\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateClientMutation = useMutation({\n    mutationFn: async (data: InsertClient) => {\n      if (!client) throw new Error(\"No client to update\");\n      await apiRequest(\"PUT\", `/api/clients/${client.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({\n        title: \"Success\",\n        description: \"Client updated successfully\",\n      });\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update client\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (client) {\n      updateClientMutation.mutate(formData);\n    } else {\n      createClientMutation.mutate(formData);\n    }\n  };\n\n  const handleInputChange = (field: keyof InsertClient, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const isLoading = createClientMutation.isPending || updateClientMutation.isPending;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"modal-title\">\n            {client ? \"Edit Client\" : \"Add New Client\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"contactPerson\">Client Name</Label>\n            <Input\n              id=\"contactPerson\"\n              value={formData.contactPerson}\n              onChange={(e) => {\n                handleInputChange(\"contactPerson\", e.target.value);\n                handleInputChange(\"companyName\", e.target.value);\n                handleInputChange(\"email\", \"client@example.com\");\n              }}\n              placeholder=\"Enter client name\"\n              required\n              data-testid=\"input-contact-person\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"phone\">Phone Number</Label>\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              value={formData.phone}\n              onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n              placeholder=\"Enter phone number\"\n              required\n              data-testid=\"input-phone\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"address\">Address</Label>\n            <Textarea\n              id=\"address\"\n              rows={3}\n              value={formData.address}\n              onChange={(e) => handleInputChange(\"address\", e.target.value)}\n              placeholder=\"Enter complete address\"\n              required\n              data-testid=\"textarea-address\"\n            />\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              type=\"submit\"\n              className=\"gradient-bg hover:opacity-90 flex-1\"\n              disabled={isLoading}\n              data-testid=\"button-save-client\"\n            >\n              {client ? \"Update Client\" : \"Add Client\"}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isLoading}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5533},"client/src/components/modals/invoice-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { generatePDF } from \"@/lib/pdf-generator\";\nimport InvoicePreview from \"@/components/invoice/invoice-preview\";\nimport type { InvoiceWithClient } from \"@shared/schema\";\n\ninterface InvoiceModalProps {\n  invoice: InvoiceWithClient | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function InvoiceModal({ invoice, isOpen, onClose }: InvoiceModalProps) {\n  const { toast } = useToast();\n\n  const handleDownloadPDF = async () => {\n    if (!invoice) return;\n    \n    try {\n      await generatePDF(invoice);\n      toast({\n        title: \"Success\",\n        description: \"PDF downloaded successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate PDF\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!invoice) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl w-full max-h-screen overflow-auto\">\n        <DialogHeader>\n          <div className=\"flex justify-between items-center\">\n            <DialogTitle data-testid=\"modal-title\">Invoice Preview</DialogTitle>\n            <div className=\"flex space-x-2\">\n              <Button\n                onClick={handleDownloadPDF}\n                className=\"gradient-bg hover:opacity-90\"\n                data-testid=\"button-download-pdf\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download PDF\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={onClose}\n                className=\"text-gray-400 hover:text-gray-600\"\n                data-testid=\"button-close-modal\"\n              >\n                <X className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"pt-6\">\n          <InvoicePreview invoice={invoice} />\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2235},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}